public class SageApiActivityUtils {
    public final static string setting_PayNowBaseUrl;
    public final static string setting_EmailSuffix;
    public final static string setting_CustomerCommunityUserProfileName;
    public final static string setting_SalesforceSoapServiceUrl;
    public final static string setting_ZuoraGenerateQuoteUrl;
    public final static string setting_ZuoraGenerateQuoteUrl_sandbox;
    public final static string setting_CustomerCommunityName;
    public final static string setting_CustomerCommunityAdminRoleName;
    public final static string setting_CustomerCommunityUserRoleName;
    public final static string setting_PartnerCommunityName;
    public final static string setting_CustomerCommunityType;
    public final static string setting_PartnerCommunityType;
    public final static string setting_StandardAccountRecordType;
    public final static string setting_PartnerAccountRecordType;
    public final static Integer setting_MaxAttemptsPerStep;
    public final static string setting_RetryTimerDefinition;
    public final static Boolean setting_EnableDebug;
    public final static Boolean setting_EnableLogging;
    public final static Boolean setting_DisablePlatformEvent;
    public final static Integer setting_HttpCalloutDefaultTimeoutInSeconds;
    public final static Integer setting_HttpCalloutDefaultMaxRetries;
    public final static String setting_OpportunityLeadSource;
    public final static String setting_OpportunityStageEvaluating;
    public final static String setting_OpportunityStageClosedWon;
    public final static String setting_OpportunityClosedWonReason;
    public final static String setting_ApiUserName;

    public static Profile CommunityProfile { get; private set; }

    static {
        try {
            setting_PayNowBaseUrl = PayNowSetting__c.getInstance('payNowBaseUrl').Value__c;
            setting_EmailSuffix = SageApiActivitySetting__c.getInstance('AutoGeneratedEmailSuffix').Value__c;
            setting_CustomerCommunityUserProfileName = SageApiActivitySetting__c.getInstance('CustomerCommunityUserProfileName').Value__c;
            setting_SalesforceSoapServiceUrl = SageApiActivitySetting__c.getInstance('SalesforceSoapServiceUrl').Value__c;
            setting_ZuoraGenerateQuoteUrl = SageApiActivitySetting__c.getInstance('ZuoraGenerateQuoteUrl').Value__c;
            setting_ZuoraGenerateQuoteUrl_sandbox = SageApiActivitySetting__c.getInstance('ZuoraGenerateQuoteUrl_sandbox').Value__c;
            setting_CustomerCommunityName = SageApiActivitySetting__c.getInstance('CustomerCommunityName').Value__c;
            setting_CustomerCommunityAdminRoleName = SageApiActivitySetting__c.getInstance('CustomerCommunityAdminRoleName').Value__c;
            setting_CustomerCommunityUserRoleName = SageApiActivitySetting__c.getInstance('CustomerCommunityUserRoleName').Value__c;
            setting_PartnerCommunityName = SageApiActivitySetting__c.getInstance('PartnerCommunityName').Value__c;
            setting_CustomerCommunityType = SageApiActivitySetting__c.getInstance('CustomerCommunityType').Value__c;
            setting_PartnerCommunityType = SageApiActivitySetting__c.getInstance('PartnerCommunityType').Value__c;
            setting_EnableDebug = Boolean.valueOf(SageApiActivitySetting__c.getInstance('EnableDebug').Value__c);
            setting_EnableLogging = Boolean.valueOf(SageApiActivitySetting__c.getInstance('EnableLogging').Value__c);
            setting_DisablePlatformEvent = Boolean.valueOf(SageApiActivitySetting__c.getInstance('DisablePlatformEvent').Value__c);
            setting_StandardAccountRecordType = 'Standard Account';
            setting_PartnerAccountRecordType = 'Partner Account';
            setting_MaxAttemptsPerStep = Integer.ValueOf(SageApiActivitySetting__c.getInstance('MaxAttemptsPerStep').Value__c);
            setting_RetryTimerDefinition = SageApiActivitySetting__c.getInstance('RetryTimerDefinition').Value__c;
            setting_HttpCalloutDefaultTimeoutInSeconds = Integer.ValueOf(SageApiActivitySetting__c.getInstance('HttpCalloutDefaultTimeoutInSeconds').Value__c);
            setting_HttpCalloutDefaultMaxRetries = Integer.ValueOf(SageApiActivitySetting__c.getInstance('HttpCalloutDefaultMaxRetries').Value__c);
            setting_OpportunityLeadSource = SageApiActivitySetting__c.getInstance('OpportunityLeadSource').Value__c;
            setting_OpportunityStageEvaluating = SageApiActivitySetting__c.getInstance('OpportunityStageEvaluating').Value__c;
            setting_OpportunityStageClosedWon = SageApiActivitySetting__c.getInstance('OpportunityStageClosedWon').Value__c;
            setting_OpportunityClosedWonReason = SageApiActivitySetting__c.getInstance('OpportunityClosedWonReason').Value__c;
            setting_ApiUserName = SageApiActivitySetting__c.getInstance('ApiUserName').Value__c;
            Profile pf = [Select id,name from Profile where name =:setting_CustomerCommunityUserProfileName limit 1];
            CommunityProfile = pf;
        } catch (Exception e) {
            System.debug(e);
            ExceptionHandler.CatchException('SageApiActivityUtils', 'Init Configuration Settings', e);
        }
    }

    public static void updateActivitySteps(SageApiActivity__c activity, SageApiActivityStep step, Boolean updateAttempts) {

        // nothing to do
        if (step == null) return;
        step = step.deepClone();
        step.Attempts = step.Attempts > -1 ? step.Attempts + 1 : 1;

        SageApiActivityUtils.debug('****** In updateActivitySteps ' + step + ', activity = ' + activity);

        List<SageApiActivityStep> steps = null;
        if (String.isBlank(activity.ActivitySteps__c)) {
            steps = new List<SageApiActivityStep> {step};
        } else {
            try {
                steps = (List<SageApiActivityStep>)JSON.deserialize(activity.ActivitySteps__c, List<SageApiActivityStep>.class);
            } catch (Exception e) {
                Steps = null;
            }
            if (steps == null) {
                steps = new List<SageApiActivityStep> {step};
            } else {
                Boolean stepFound = false;
                for (Integer i = 0; i < steps.size(); i ++) {
                    SageApiActivityStep theStep = steps[i];
                    if ((theStep.StepID == step.StepID && step.ActionID == null) || (theStep.StepID == step.StepID && theStep.ActionID == step.ActionID)) {
                        SageApiActivityUtils.debug('****** found step: ' + theStep);
                        if (updateAttempts) theStep.Attempts = theStep.Attempts > 0 ? theStep.Attempts + 1 : 1;
                        if (theStep.StepStatus == SageApiStatus.InProgressExternal && (step.StepStatus == SageApiStatus.Success || step.StepStatus == SageApiStatus.Abandoned || step.StepStatus == SageApiStatus.ManualInterventionRequired)) {
                            theStep.StepStatus = step.StepStatus;
                            theStep.StepInput = step.StepInput;
                            theStep.StepMessage = step.StepMessage;
                        }
                        SageApiActivityUtils.debug('****** updated theStep: ' + theStep);
                        stepFound = true;
                        break;
                    }
                }
                if (!stepFound) {
                    SageApiActivityUtils.debug('****** step not found');
                    steps.add(step);
                }
            }
        }

        SageApiActivityUtils.debug('****** steps: ' + steps);

        activity.ActivitySteps__c = JSON.serialize(steps);

        SageApiActivityUtils.debug('****** Finished updateActivitySteps activity = ' + activity);

        //if (step.StepID == 3)
        //    throw new CustomException('my error');
    }

    public static void setError(SageApiActivity__c activity, SageApiActivityStep step, string status, List<SageApiActivityError> errors) {
        step = step.deepClone();
        step.StepStatus = status;
        step.StepMessage = JSON.serialize(errors);
        activity.RetryStartStep__c = step.StepID;
        activity.RetryStartAction__c = step.ActionID;
        if (activity.ActivityStatus__c == SageApiStatus.InProgress)
            activity.ActivityEndTime__c = Datetime.now();
        activity.ActivityStatus__c = status;
        activity.LockedForProcess__c = SageApiProcessLocks.None;
        activity.Step_Serialised__c = JSON.serialize(step);
        updateActivitySteps(activity, step, true);
        if (activity.ActivityType__c == SageApiActivityTriggerHandler.TryNowActivityType || activity.ActivityType__c == SageApiActivityTriggerHandler.TetrisStartTrialActivityType)
            SageApiTryNowActivityUtils.updateArtifact(activity, errors);
        else if (activity.ActivityType__c == SageApiActivityTriggerHandler.BuyNowActivityType || activity.ActivityType__c == SageApiActivityTriggerHandler.TetrisStartPaidActivityType || activity.ActivityType__c.contains('Subscription') || activity.ActivityType__c == SageApiActivityTriggerHandler.CreateAccountActivityType)
            SageApiBuyNowActivityUtils.updateArtifact(activity, errors);
        else if (activity.ActivityType__c == SageApiActivityTriggerHandler.LeadActivityType)
            SageApiTryNowLeadActivityUtils.updateArtifact(activity, errors);
        else if (activity.ActivityType__c == SageApiActivityTriggerHandler.TryNowConvertActivityType || activity.ActivityType__c == SageApiActivityTriggerHandler.TetrisConvertTrialActivityType)
            SageApiTryNowConvertActivityUtils.updateArtifact(activity, errors);
        else if (activity.ActivityType__c == SageApiActivityTriggerHandler.AddCommunityUserType)
            SageApiAddCommUserActivityUtils.updateArtifact(activity, errors);

        /*//TODO: check limits or batch up
        if (status == SageApiStatus.ManualInterventionRequired) {
            String hour = String.valueOf(Datetime.now().hour());
            String min = String.valueOf(Datetime.now().minute() + 1);
            String ss = String.valueOf(Datetime.now().second());
            String dd = String.valueOf(Datetime.now().day());
            String mm = String.valueOf(Datetime.now().month());
            String yy = String.valueOf(Datetime.now().year());
            String nextFireTime = ss + ' ' + min + ' ' + hour + ' ' + dd + ' ' + mm + ' ? ' + yy;
            SageApiActivityResumeSchedulable s = new SageApiActivityResumeSchedulable();
            s.ActivityId = activity.Id;
            System.schedule('Activity resume job for '+activity.Id, nextFireTime, s);
        }*/
    }

    public static void setSuccess(SageApiActivity__c activity, SageApiActivityStep step) {
        SageApiActivityUtils.debug('****** In setSuccess inputs step = ' + step + ', activity = ' + activity);
        step = step.deepClone();
        step.StepStatus = SageApiStatus.Success;
        step.StepMessage = null;
        activity.RetryStartStep__c = null;
        activity.RetryStartAction__c = null;
        activity.LockedForProcess__c = SageApiProcessLocks.None;
        activity.Step_Serialised__c = JSON.serialize(step);
        if (step.OnSuccessGotoSteps == null || step.OnSuccessGotoSteps.size()==0) {
            if (activity.ActivityStatus__c == SageApiStatus.InProgress)
                activity.ActivityEndTime__c = Datetime.now();
            activity.ActivityStatus__c = SageApiStatus.Success;
        } else if (activity.ActivityStatus__c == SageApiStatus.InProgressExternal) {
            activity.ActivityStatus__c = SageApiStatus.InProgress;
        }

        updateActivitySteps(activity, step, true);
        if (activity.ActivityType__c == SageApiActivityTriggerHandler.TryNowActivityType || activity.ActivityType__c == SageApiActivityTriggerHandler.TetrisStartTrialActivityType)
            SageApiTryNowActivityUtils.updateArtifact(activity, null);
        else if (activity.ActivityType__c == SageApiActivityTriggerHandler.BuyNowActivityType || activity.ActivityType__c == SageApiActivityTriggerHandler.TetrisStartPaidActivityType || activity.ActivityType__c.contains('Subscription') || activity.ActivityType__c == SageApiActivityTriggerHandler.CreateAccountActivityType)
            SageApiBuyNowActivityUtils.updateArtifact(activity, null);
        else if (activity.ActivityType__c == SageApiActivityTriggerHandler.LeadActivityType)
            SageApiTryNowLeadActivityUtils.updateArtifact(activity, null);
        else if (activity.ActivityType__c == SageApiActivityTriggerHandler.TryNowConvertActivityType || activity.ActivityType__c == SageApiActivityTriggerHandler.TetrisConvertTrialActivityType)
            SageApiTryNowConvertActivityUtils.updateArtifact(activity, null);
        else if (activity.ActivityType__c == SageApiActivityTriggerHandler.AddCommunityUserType)
            SageApiAddCommUserActivityUtils.updateArtifact(activity, null);
        SageApiActivityUtils.debug('****** In setSuccess Calling update activitySteps with step = ' + step + ', activity = ' + activity);
    }

    public static void setPending(SageApiActivity__c activity, SageApiActivityStep step) {
        SageApiActivityUtils.debug('****** In setPending inputs step = ' + step + ', activity = ' + activity);
        step = step.deepClone();
        step.StepStatus = SageApiStatus.InProgressExternal;
        activity.Step_Serialised__c = JSON.serialize(step);
        activity.ActivityStatus__c = SageApiStatus.InProgressExternal;
        updateActivitySteps(activity, step, true);
        SageApiBuyNowActivityUtils.updateArtifact(activity, null);
        SageApiActivityUtils.debug('****** In setPending Calling update activitySteps with step = ' + step + ', activity = ' + activity);
    }

    public static void addErrors(List<SageApiActivityError> errors, string code, string target, string message) {
        SageApiActivityError error = new SageApiActivityError(code, target, message);
        errors.add(error);
    }

    public static List<SageApiActivityError> updateActivityWithException(SageApiActivity__c activity, SageApiActivityStep step, Boolean retryable, String errorTarget, String errorMsg) {
        List<SageApiActivityError> errors = new List<SageApiActivityError>();
        addErrors(errors, SageApiActivityErrorCodes.UnhandledException, errorTarget, errorMsg);
        setError(activity, step, SageApiStatus.ManualInterventionRequired, errors);
        return errors;
    }

    public static SageApiActivityStep getLastCompletedStep(SageApiActivity__c activity) {
        if (String.isBlank(activity.ActivitySteps__c)) return null;

        try {
            List<SageApiActivityStep> steps = (List<SageApiActivityStep>)JSON.deserialize(activity.ActivitySteps__c, List<SageApiActivityStep>.class);
            if (Steps == null || steps.size() == 0) return null;

            // Only take the last step for now, extra effort required to support parallel steps
            return steps[steps.size() - 1];
        } catch (Exception e) {
            ExceptionHandler.CatchException('SageApiActivityUtils', 'getCompletedStep', e);
            return null;
        }
    }

    public static SageApiActivityStep getCompletedStep(SageApiActivity__c activity, Integer stepId) {
        if (stepId < 1 || String.isBlank(activity.ActivitySteps__c)) return null;

        try {
            List<SageApiActivityStep> steps = (List<SageApiActivityStep>)JSON.deserialize(activity.ActivitySteps__c, List<SageApiActivityStep>.class);
            if (Steps == null || steps.size() == 0) return null;

            // Not supporting multiple execution of any one step
            for (SageApiActivityStep step : steps)
                if (step.StepID == stepId)
                    return step;

            return null;
        } catch (Exception e) {
            ExceptionHandler.CatchException('SageApiActivityUtils', 'getCompletedStep', e);
            return null;
        }
    }

    public static SageApiActivityStep getProcessedStep(SageApiActivity__c activity, SageApiActivityStep stepToLookup) {
        if (activity == null || stepToLookup == null) return null;

        try {
            List<SageApiActivityStep> steps = (List<SageApiActivityStep>)JSON.deserialize(activity.ActivitySteps__c, List<SageApiActivityStep>.class);
            if (Steps == null || steps.size() == 0) return null;

            // Not supporting multiple execution of any one step
            SageApiActivityStep stepFound = null;
            for (SageApiActivityStep step : steps)
                if ((step.StepID == stepToLookup.stepID && stepToLookup.ActionID == null) || (step.StepID == stepToLookup.stepID && step.ActionID == stepToLookup.ActionID))
                    stepFound = step;  // intentionally take the last record

            return stepFound;
        } catch (Exception e) {
            ExceptionHandler.CatchException('SageApiActivityUtils', 'getProcessedStep', e);
            return null;
        }
    }

    public static SageApiActivityStep getNextQueuedActionStep(List<SageApiActivityStep> steps, SageApiActivityStep currentStep) {
        for (SageApiActivityStep step : steps)
            if (step.StepID == currentStep.StepID && (currentStep.NextActionID == null || step.ActionID == currentStep.NextActionID))
                return step;
        return null;
    }

    public static Boolean requiredStepsProcessed(SageApiActivity__c activity, SageApiActivityStep stepToLookup) {
        if (stepToLookup.StartAfterCompletedSteps == null || stepToLookup.StartAfterCompletedSteps.size()==0) return true;

        for (SageApiActivityStep requiredStep : stepToLookup.StartAfterCompletedSteps) {
            SageApiActivityStep stepFound = getProcessedStep(activity, requiredStep);
            SageApiActivityUtils.debug('required step found: ' + stepFound);
            if (stepFound == null || stepFound.StepStatus != SageApiStatus.Success)
                return false;
        }
        return true;
    }

    public static Boolean completedWithSuccess(SageApiActivity__c activity, Integer stepId) {
        // check if processed already
        SageApiActivityStep completedStep = getCompletedStep(activity, stepId);
        SageApiActivityUtils.debug('completedWithSuccess Step: '+JSON.serialize(completedStep));
        if (completedStep != null && completedStep.StepStatus == SageApiStatus.Success)
            return true;

        return false;
    }

    public static Boolean reachedMaxAttempts(SageApiActivity__c activity, SageApiActivityStep stepToLookup) {
        SageApiActivityUtils.debug('reachedMaxAttempts stepToLookup: '+stepToLookup);
        SageApiActivityStep step = getProcessedStep(activity, stepToLookup);
        SageApiActivityUtils.debug('reachedMaxAttempts step found: '+step);
        if (step != null && step.Attempts >= setting_MaxAttemptsPerStep)
            return true;

        //stepToLookup.StepStatus = SageApiStatus.InProgress;
        //updateActivitySteps(activity, stepToLookup, true);
        //SageApiActivityUtils.debug('reachedMaxAttempts activity: '+activity);
        return false;
    }

    public static List<SageApiActivity__c> refreshActivities(List<SageApiActivity__c> activitiesToRefresh)
    {
        SageApiActivityUtils.debug('refreshActivities started');
        if (activitiesToRefresh == null || activitiesToRefresh.size() == 0) return null;
        Set<ID> keys = new Set<ID>();
        for (SageApiActivity__c activity : activitiesToRefresh)
            keys.add(activity.Id);
        List<SageApiActivity__c> activities = [SELECT Account__c,ActivityID__c,ActivityStatus__c,ActivitySteps__c,ActivityType__c,Activity_Duration__c,Artifacts__c,Asset__c,Case__c,CommunityMembership__c,Contact__c,Id,IsDeleted,Lead__c,Name,Opportunity__c,Payload__c,PayNowToken__c,PayNowToken__r.PayNowRedirectUrl__c,Quote__c,LockedForProcess__c,RetryStartStep__c,RetryStartAction__c,SageUserIdentityProvider__c,SubscriptionMaster__c,SubscriptionMaster__r.EnableInsertTrigger__c,Subscription__c,User__c,ZuoraSubscriptionId__c,Entitlement_Message__c,Entitlement_Message__r.Status__c,Entitlement_Message__r.Error_Message__c,Step_Serialised__c,PaymentUrl__c,QuoteMetricsCalculated__c,SubscriptionMaster__r.CbcSubscriptionId__c,AccountId__c,AccountIdType__c,ContactId__c,ContactIdType__c,ChannelPlatformProvided__c,ChannelPartnerProvided__c,ActivityAction__c,ChannelPartner__c,EntitlementId__c,ManagingAccount__c,ProductCountries__c,ProductNames__c,SubscriptionId__c,ActivityTypeVersion__c,SubscriptionGroupId__c,ClientRef__c,PartnerAccount__c,PartnerContact__c,ReferrerPromotion__c,ReferrerPromotion__r.PricingCode__r.Name FROM SageApiActivity__c WHERE id in :keys];
        SageApiActivityUtils.debug('refreshActivities ended');
        return activities;
    }

    public static void updateActivities(List<SageApiActivity__c> activities)
    {
        SageApiActivityUtils.debug('updateActivities: ' + activities);
        if (activities == null || activities.size() == 0) return;

        Database.UpsertResult [] results = Database.upsert(activities, SageApiActivity__c.Fields.ActivityID__c, false);
        Integer index = -1;
        for(Database.UpsertResult result : results) {
            index++;
            if (result.isSuccess())
                continue;

            ExceptionHandler.CatchException('SageApiActivityUtils', 'updateActivities', new DmlException(composeErrorMessageForLastStep(activities[index], ''+result.getErrors())));
        }
    }

    public static void updateActivities(SageApiActivityStep step, List<SageApiActivity__c> activities) {
        if (activities == null || activities.isEmpty() || step == null) return;
        for (SageApiActivity__c a : activities) {
            if (string.isBlank(a.ActivitySteps__c))
                continue;

            try {
                List<SageApiActivityStep> steps = (List<SageApiActivityStep>)JSON.deserialize(a.ActivitySteps__c, List<SageApiActivityStep>.class);
                if (Steps == null || steps.size() == 0)
                    continue;

                // get current processing stepStatus
                string stepStatus = null;
                string stepMessage = null;
                for (SageApiActivityStep s : steps)
                    if (s.StepID == step.StepID && s.ActionID == step.ActionID) {
                        stepStatus = s.StepStatus;
                        stepMessage = s.StepMessage;
                    }

                // no next action and current step status is processed
                if ((step.OnSuccessGotoSteps == null || step.OnSuccessGotoSteps.isEmpty()) && step.NextActionID == 0 &&  (stepStatus == SageApiStatus.Success || stepStatus == SageApiStatus.ManualInterventionRequired || stepStatus == SageApiStatus.Abandoned))
                    if (stepStatus == SageApiStatus.Success)
                        SageApiActivityUtils.setSuccess(a, step);
                    else if (stepStatus == SageApiStatus.ManualInterventionRequired || stepStatus == SageApiStatus.Abandoned) {
                        List<SageApiActivityError> errors = null;
                        if (String.isNotBlank(stepMessage))
                            errors = (List<SageApiActivityError>)JSON.deserialize(stepMessage, List<SageApiActivityError>.class);
                        SageApiActivityUtils.setError(a, step, stepStatus, errors);
                    }
            } catch (Exception e) {
                ExceptionHandler.CatchException('SageApiTryNowActivityUtils.UpdateActivities', 'deriving activity status', e);
                List<SageApiActivityError> errors = new List<SageApiActivityError>();
                SageApiActivityUtils.addErrors(errors, SageApiActivityErrorCodes.UnhandledException, 'SageApiTryNowActivityUtils.UpdateActivities', 'Error encountered when deriving activity: ' + e);
                SageApiActivityUtils.setError(a, step, SageApiStatus.ManualInterventionRequired, errors);
            }

        }
        updateActivities(activities);
    }

    public static Boolean activityTerminated(SageApiActivity__c activity) {
        return (activity.ActivityStatus__c == SageApiStatus.ManualInterventionRequired ||
                activity.ActivityStatus__c == SageApiStatus.Success);
    }

    public static string composeErrorMessageForLastStep(SageApiActivity__c activity, string detailError) {
        Integer errorMessageLengthLimit = 32768;
        SageApiActivityStep step = getLastCompletedStep(activity);
        string message = 'activity id: ' + activity.Id;
        if (step != null)
            message = message + ', activity step: ' + step.StepID;
        message = message + '. Error detail:' + detailError;

        if (message.length() > errorMessageLengthLimit)
            message = message.substring(0, errorMessageLengthLimit - 1);
        return message;
    }

    public static List<SageApiActivity__c> getPendingActivitiesForNextAction(SageApiActivityStep step, List<SageApiActivity__c> activities) {
        SageApiActivityUtils.debug('checkpoint 1: ' + activities);
        if (activities == null || activities.isEmpty() || step == null) return null;
        List<SageApiActivity__c> pendingActivities = new List<SageApiActivity__c>();
        for (SageApiActivity__c a : activities) {
            // unqualified - processed activities
            // if ((a.ActivityStatus__c != SageApiStatus.InProgress && a.ActivityStatus__c != SageApiStatus.Unknown)) continue;
            // unqualified - not processed steps unqualified
            SageApiActivityUtils.debug('checkpoint 2: '+a.ActivitySteps__c);
            if (string.isBlank(a.ActivitySteps__c))
                continue;
            SageApiActivityUtils.debug('checkpoint 3');

            try {
                List<SageApiActivityStep> steps = (List<SageApiActivityStep>)JSON.deserialize(a.ActivitySteps__c, List<SageApiActivityStep>.class);
                // unqualified - not processed items
                SageApiActivityUtils.debug('checkpoint 4');
                if (Steps == null || steps.size() == 0)
                    continue;
                SageApiActivityUtils.debug('checkpoint 5');

                // get the last current processing stepStatus
                string stepStatus = null;
                for (SageApiActivityStep s : steps) {
                    SageApiActivityUtils.debug('s.StepID = ' + s.StepID);
                    SageApiActivityUtils.debug('step.StepID = ' + step.StepID);
                    SageApiActivityUtils.debug('s.ActionID = ' + s.ActionID);
                    SageApiActivityUtils.debug('step.ActionID = ' + step.ActionID);
                    if (s.StepID == step.StepID && s.ActionID == step.ActionID) {
                        stepStatus = s.StepStatus;
                        break;
                    }
                }
                SageApiActivityUtils.debug('checkpoint 6: ' + stepStatus);

                // qualified - has next action and current step is first step/action or current step status is success
                if (step.NextActionID > 0 &&  (stepStatus == SageApiStatus.Success || stepStatus == SageApiStatus.InProgress))
                    pendingActivities.add(a);
                SageApiActivityUtils.debug('checkpoint 7: ' + pendingActivities);
            } catch (Exception e) {
                ExceptionHandler.CatchException('SageApiActivityUtils', 'getPendingActivitiesForNextAction', e);
                //add logic to terminate the problem activity
                SageApiActivityUtils.debug('checkpoint 8: ' + e);
                continue;
            }

        }
        return pendingActivities;
    }

    public static void checkAndPrepareForRetry(List<SageApiActivity__c> activities, List<SageApiActivityStep> allSteps){
        Boolean hasRetry = false;
        for (SageApiActivity__c activity : activities) {
            if (String.isBlank(activity.ActivitySteps__c)) continue;
            try {
                List<SageApiActivityStep> steps = (List<SageApiActivityStep>)JSON.deserialize(activity.ActivitySteps__c, List<SageApiActivityStep>.class);
                if (Steps == null || steps.size() == 0 || activity.ActivityStatus__c != SageApiStatus.Restarting) continue;

                SageApiActivityStep lastStep = getLastCompletedStep(activity);
                SageApiActivityUtils.debug('lastStep: '+lastStep);
                if (lastStep.StepStatus != SageApiStatus.Success) {
                    activity.RetryStartStep__c = lastStep.StepID;
                    activity.RetryStartAction__c = lastStep.ActionID;
                    SageApiActivityUtils.debug('RetryStartStep__c: '+lastStep);
                } else {
                    SageApiActivityStep nextStep = lastStep;
                    while (nextStep != null && nextStep.StepStatus == SageApiStatus.Success)
                        nextStep = getNextQueuedActionStep(allSteps, nextStep);
                    SageApiActivityUtils.debug('nextStep: '+nextStep);
                    if (nextStep == null || nextStep.StepStatus == SageApiStatus.Success) continue;
                    activity.RetryStartStep__c = nextStep.StepID;
                    activity.RetryStartAction__c = nextStep.ActionID;
                    SageApiActivityUtils.debug('RetryStartStep__c next: '+nextStep);
                }

                if (activity.RetryStartStep__c > 0) {
                    SageApiActivityUtils.debug('has retry: '+activity.RetryStartStep__c);
                    hasRetry = true;
                    List<SageApiActivityStep> cleanedSteps = new List<SageApiActivityStep>();
                    for (SageApiActivityStep theStep : steps)
                        if (theStep.StepID < activity.RetryStartStep__c)
                            cleanedSteps.add(theStep);
                        else if (theStep.StepID == activity.RetryStartStep__c && theStep.ActionID < activity.RetryStartAction__c)
                            cleanedSteps.add(theStep);
                    activity.ActivitySteps__c = JSON.serialize(cleanedSteps);
                    SageApiActivityUtils.debug('cleaned steps: '+activity.ActivitySteps__c);
                }
            } catch (Exception e) {
                ExceptionHandler.CatchException('SageApiActivityUtils', 'checkAndPrepareForRetry', e);
            }
        }

        SageApiActivityUtils.debug('activities: '+activities);

        //if (hasRetry)
        //    throw new CustomException('my custom error');
        if (hasRetry) update activities;
    }

    public static void queueNextSteps(Map<SageApiActivityStep, List<SageApiActivity__c>> stepActivitiesMap, string sessionId){}

    public static void queueNextSteps(string activityType, Map<SageApiActivityStep, List<SageApiActivity__c>> stepActivitiesMap, string sessionId, string handlerName) {
        queueNextSteps(1, activityType, stepActivitiesMap, sessionId, handlerName);
    }

    public static void queueNextSteps(Integer version, string activityType, Map<SageApiActivityStep, List<SageApiActivity__c>> stepActivitiesMap, string sessionId, string handlerName) {
        if (stepActivitiesMap.size() == 0) return;

        Integer index = -1;
        for (SageApiActivityStep step : stepActivitiesMap.keySet()) {
            index++;
            List<SageApiActivity__c> activities = stepActivitiesMap.get(step);
            if (activities.size() == 0) continue;
            if (step.UseInProcessQueue) {
                //if (TestUtils.isRunningTest()) return;

                runHandler(version, activityType, step, activities, sessionId, handlerName);
                continue;
            }

            string stepStr = JSON.serialize(step);
            string activitiesStr = JSON.serialize(activities);
            queueActivities(version, activityType, stepStr, activitiesStr, sessionId, handlerName);
            SageApiActivityUtils.debug('more next steps queued in future queueActivities');
        }
    }

    @Future
    public static void queueActivities(Integer version, string activityType, string stepStr, string activitiesStr, string sessionId, string handlerName) {
        SageApiActivityUtils.debug('next step to be queued (future): '+stepStr);
        SageApiActivityStep step = (SageApiActivityStep) JSON.deserialize(stepStr, SageApiActivityStep.class);
        List<SageApiActivity__c> activities = (List<SageApiActivity__c>) JSON.deserialize(activitiesStr, List<SageApiActivity__c>.class);

        //http://salesforce.stackexchange.com/questions/94301/maximum-stack-depth-reached-12
        //if (TestUtils.isRunningTest()) return;

        try {
            string setting_DisableActivityQueue = SageApiActivitySetting__c.getInstance('DisableActivityQueue').Value__c;
            if (setting_DisableActivityQueue == 'true') {
                for (SageApiActivity__c activity : activities)
                    updateActivityWithException(activity, step, false, 'queueActivities', 'Activity queue is disabled');
                updateActivities(activities);
                return;
            }
        } catch (Exception e) {
            ExceptionHandler.CatchException('SageApiActivityUtils', 'queueActivities', e);
        }
/*
        List<SageApiActivity__c> candidateActivities = new List<SageApiActivity__c>();
        step.StepStatus = SageApiStatus.InProgress;
        for (SageApiActivity__c activity : activities) {
            if (reachedMaxAttempts(activity, step)) {
                updateActivityWithException(activity, step, false, 'queueActivities', 'Retry reached allowed max threshold: ' + setting_MaxAttemptsPerStep + ', for step: ' + step.StepName);
                continue;
            }
            updateActivitySteps(activity, step, true);
            candidateActivities.add(activity);
        }
        updateActivities(activities);
*/
        runHandler(version, activityType, step, activities, sessionId, handlerName);

        //step.JobID = System.enqueueJob(new SageApiTryNowActivityHandler(step, candidateActivities, sessionId));
        SageApiActivityUtils.debug('next step queued in queueActivities (future): '+step.JobID);
    }

    public static void debug(String msg) {
        if (setting_EnableDebug) System.debug(msg);
    }

    public static void log(List<SageApiActivityLog__c> logs) {
        if (setting_EnableLogging)
            try {
                insert logs;
            } catch (Exception ex) {
                SageApiActivityUtils.debug('Logging error:'+ex);
            }
    }

    private static void runHandler(Integer version, string activityType, SageApiActivityStep step, List<SageApiActivity__c> activities, string sessionId, string handlerName) {
        Type t = Type.forName(handlerName);
        SageApiActivityHandlerBase handler = (SageApiActivityHandlerBase)t.newInstance();
        handler.init(version, activityType, step, activities, sessionId);

        if (Limits.getLimitQueueableJobs() - Limits.getQueueableJobs() > 0) {
            if (step == null)
                System.enqueueJob(handler);
            else
                    step.JobID = System.enqueueJob(handler);
        } else {
            List<SageApiActivityError> errors = new List<SageApiActivityError>();
            String msg = 'Queueing job exceeeds governance limit.';
            SageApiActivityUtils.addErrors(errors, SageApiActivityErrorCodes.UnhandledException, 'runHandler', msg);
            for (SageApiActivity__c activity : activities)
                SageApiActivityUtils.setError(activity, step, SageApiStatus.ManualInterventionRequired, errors);

            SageApiActivityUtils.updateActivities(activities);
            ExceptionHandler.CatchException('SageApiTryNowActivityUtils', 'runHandler', new CustomException(msg));
            SageApiActivityUtils.debug(msg);
        }

        //step.JobID = System.enqueueJob(new SageApiTryNowActivityHandler(step, activities, sessionId));
        if (step == null)
            SageApiActivityUtils.debug('next step queued in queueActivities (future): null step');
        else
                SageApiActivityUtils.debug('next step queued in queueActivities (future): '+step.JobID);
    }

    public static List<Product_Tier__c> getProductTiers(List<SageApiActivityRequestObjects.Product> products){
        SageApiActivityUtils.debug('Entering getProductTiers with ' + products);
        if (products == null || products.size() == 0) return null;

        String queryFilter = '';
        for (SageApiActivityRequestObjects.Product product : products)
            if (product != null && string.isNotBlank(product.tierCode))
                queryFilter += (String.IsBlank(queryFilter) ? '' : ' or ') + '(Product_Tier_Code__c = \'' + String.escapeSingleQuotes(product.tierCode) + '\')';

        if (string.isBlank(queryFilter)) return null;

        string query = 'SELECT Product_Tier_Code__c, name, SageProduct__c, Product__c, ZProduct__c, Trial_Period__c, Start_Date__c, End_Date__c, Product_Use_Region__c, toLabel(EventNotificationTarget__c)  FROM Product_Tier__c where ' + queryFilter;
        List<Product_Tier__c> listTierData = Database.query(query);
        return listTierData;
    }

    public static Map<string, Product_Tier_Rate_Plan__c> getProductTierRatePlans(List<SageApiActivityRequestObjects.Product> products){
        if (products == null || products.size() == 0) return null;

        Map<string, Product_Tier_Rate_Plan__c> tierDataMap = new Map<string, Product_Tier_Rate_Plan__c>();
        String queryFilter = '';
        for (SageApiActivityRequestObjects.Product product : products)
            if (product != null && string.isNotBlank(product.TierCode) && string.isNotBlank(product.tierRatePlanCode)) {
                string subQuery = '(Product_Tier__r.Product_Tier_Code__c = \'' + String.escapeSingleQuotes(product.tierCode) + '\' and name = \'' + String.escapeSingleQuotes(product.tierRatePlanCode) + '\')';
                if (queryFilter.indexOf(subQuery) >= 0) continue;
                queryFilter += (String.IsBlank(queryFilter) ? '' : ' or ') + subQuery;
                tierDataMap.put(product.tierCode+':'+product.tierRatePlanCode, null);
            }

        if (string.isBlank(queryFilter)) return tierDataMap;

        string query = 'SELECT Product_Rate_Plan__c, Product_Tier__c, Product_Rate_Plan__r.zqu__Product__r.Name,  Product_Rate_Plan__r.zqu__Product__r.Id, Product_Tier__r.Product_Tier_Code__c, name, End_Date__c,Id,Payment_Grace_Period__c,Start_Date__c,Term_Type__c,InitialTerm__c,RenewalTerm__c,Trial_Period__c, Product_Tier_Rate_Plan__c.CurrencyIsoCode, Product_Tier__r.Product_Use_Region__c FROM Product_Tier_Rate_Plan__c where ' + queryFilter;
        //string query = 'SELECT Product_Rate_Plan__c, Product_Tier__r.Product_Tier_Code__c, name, End_Date__c,Id,Payment_Grace_Period__c,Start_Date__c,Term_Type__c,Trial_Period__c, Product_Tier_Rate_Plan__c.CurrencyIsoCode, Product_Tier__r.Product_Use_Region__c, InitialTerm__c, RenewalTerm__c FROM Product_Tier_Rate_Plan__c where ' + queryFilter;
        List<Product_Tier_Rate_Plan__c> listTierData = Database.query(query);
        if (listTierData == null || listTierData.size() == 0) return tierDataMap;

        for (string key : tierDataMap.keySet())
            for (Product_Tier_Rate_Plan__c plan : listTierData)
                if (key == plan.Product_Tier__r.Product_Tier_Code__c+':'+plan.name) {
                    tierDataMap.put(key, plan);
                    break;
                }

        SageApiActivityUtils.debug('Exiting getProductTiers with ' + tierDataMap);
        return tierDataMap;
    }

    public static Map<string, List<PricingCodeCharge__c>> getPricingCodeCharges(List<SageApiActivityRequestObjects.Product> products){
        return getPricingCodeCharges(products, false);
    }

    public static Map<string, List<PricingCodeCharge__c>> getPricingCodeCharges(List<SageApiActivityRequestObjects.Product> products, Boolean includeExpired){
        if (products == null || products.size() == 0) return null;

        Map<string, List<PricingCodeCharge__c>> pricingDataMap = new Map<string, List<PricingCodeCharge__c>>();
        String queryFilter = '';
        for (SageApiActivityRequestObjects.Product product : products)
            if (product != null && string.isNotBlank(product.TierCode) && string.isNotBlank(product.tierRatePlanCode) && String.isNotBlank(product.pricingCode)) {
                String subQuery = '(Pricing_Code__r.Product_Tier__r.Product_Tier_Code__c = \'' + String.escapeSingleQuotes(product.tierCode) + '\' AND Pricing_Code__r.ProductTierRatePlanCode__r.Name = \'' + String.escapeSingleQuotes(product.tierRatePlanCode) + '\'' + (string.isBlank(product.tierRatePlanCode) ? '' : ' AND Pricing_Code__r.Name=\'' + String.escapeSingleQuotes(product.pricingCode) + '\'' ) + ')';
                if (queryFilter.indexOf(subQuery) >= 0) continue;
                queryFilter += (String.IsBlank(queryFilter) ? '' : ' OR ') + subQuery;
                pricingDataMap.put(product.tierCode+':'+product.tierRatePlanCode+':'+product.pricingCode, null);
            }

        if (string.isBlank(queryFilter)) return pricingDataMap;

        string query = 'SELECT DiscountPercent__c,DiscountPrice__c,Name,NumberOfPeriods__c,Pricing_Code__r.Name,Pricing_Code__r.Start_Date__c,Pricing_Code__r.End_Date__c,Pricing_Code__r.ProductTierRatePlanCode__r.Name,Pricing_Code__r.Product_Tier__r.Product_Tier_Code__c,ProductTierRatePlan__r.Name,ProductTier__r.Product_Tier_Code__c,Product_Rate_Plan__c,Product_Rate_Plan_Charge__c,PublishedDiscountPrice__c,PublishedDiscountPercent__c,PublishedNumberOfPeriods__c FROM PricingCodeCharge__c WHERE IsDeleted = false AND (' + queryFilter +')';
        SageApiActivityUtils.debug('listPricingData query: ' + query);
        List<PricingCodeCharge__c> listPricingData = Database.query(query);
        if (listPricingData == null || listPricingData.size() == 0) return pricingDataMap;

        for (string key : pricingDataMap.keySet()) {
            List<PricingCodeCharge__c> charges = new List<PricingCodeCharge__c>();
            for (PricingCodeCharge__c pricing : listPricingData) {
                if (key != pricing.Pricing_Code__r.Product_Tier__r.Product_Tier_Code__c + ':' + pricing.Pricing_Code__r.ProductTierRatePlanCode__r.Name + ':' + pricing.Pricing_Code__r.Name)
                    continue;

                Date today = Datetime.now().dateGmt();
                if (! includeExpired && (today < pricing.Pricing_Code__r.Start_Date__c || today > pricing.Pricing_Code__r.End_Date__c))
                    continue;

                charges.add(pricing);
            }

            pricingDataMap.put(key, charges);
        }

        SageApiActivityUtils.debug('Exiting getPricingCodeCharges with ' + pricingDataMap);
        return pricingDataMap;
    }

    public static Map<string, SageApiActivityReferrerPromotion__c> getPromotions(List<SageApiActivity__c> activities){
        Map<string, SageApiActivityReferrerPromotion__c> promoDataMap = new Map<string, SageApiActivityReferrerPromotion__c>();
        String queryFilter = '';
        for (SageApiActivity__c a : activities) {
            if (String.isBlank(a.payload__c)) continue;
            SageApiTryNowActivityRequest req = (SageApiTryNowActivityRequest)JSON.deserialize(a.payload__c, SageApiTryNowActivityRequest.class);
            if (req == null || String.isBlank(req.referrerPromotion)) continue;
            String subQuery = 'ReferrerId__c = \'' + String.escapeSingleQuotes(req.referrerPromotion) + '\'';
            if (queryFilter.indexOf(subQuery) >= 0) continue;
            queryFilter += (String.IsBlank(queryFilter) ? '' : ' OR ') + subQuery;
            promoDataMap.put(req.referrerPromotion, null);
        }
        if (string.isBlank(queryFilter)) return promoDataMap;

        string query = 'SELECT Id,IsActive__c,IsDeleted,Name,PricingCode__c,PricingCode__r.Name,PricingCode__r.Product_Tier__r.Product_Tier_Code__c,PricingCode__r.ProductTierRatePlanCode__r.Name,ReferrerId__c FROM SageApiActivityReferrerPromotion__c WHERE IsDeleted = false AND (StartDate__c = NULL OR StartDate__c<='+ Datetime.Now().formatGmt('yyyy-MM-dd') +')  AND (EndDate__c = NULL OR EndDate__c>='+ Datetime.Now().formatGmt('yyyy-MM-dd') +') AND IsActive__c = true AND (' + queryFilter +')';
        SageApiActivityUtils.debug('listPricingData query: ' + query);
        List<SageApiActivityReferrerPromotion__c> promos = Database.query(query);
        if (promos == null || promos.size() == 0) return promoDataMap;

        for (string key : promoDataMap.keySet()) {
            for (SageApiActivityReferrerPromotion__c promo : promos)
                if (key == promo.ReferrerId__c) {
                    promoDataMap.put(key, promo);
                    continue;
                }
        }

        SageApiActivityUtils.debug('Exiting getPromotions with ' + JSON.serialize(promoDataMap));
        return promoDataMap;
    }

    public static Boolean sourceExists(String source) {
        List<SageApiActivityRequestObjects.Source> sources = SageApiActivityRequestObjects.Source.values();
        Boolean exists = false;
        for (SageApiActivityRequestObjects.Source s : sources)
            if (source == s.name())
                return true;
        return false;
    }

    public static Boolean identifierTypeExists(String identifierType) {
        List<SageApiActivityRequestObjects.IdentifierType> identifierTypes = SageApiActivityRequestObjects.IdentifierType.values();
        Boolean exists = false;
        for (SageApiActivityRequestObjects.IdentifierType i : identifierTypes)
            if (identifierType == i.name())
                return true;
        return false;
    }

    public static Boolean activityTypeExists(String activityType) {
        List<SageApiActivityRequestObjects.ActivityType> activityTypes = SageApiActivityRequestObjects.ActivityType.values();
        Boolean exists = false;
        for (SageApiActivityRequestObjects.ActivityType a : activityTypes)
            if (activityType == a.name())
                return true;
        return false;
    }

    public static Boolean activityActionExists(String activityAction) {
        List<SageApiActivityRequestObjects.ActivityAction> activityActions = SageApiActivityRequestObjects.ActivityAction.values();
        Boolean exists = false;
        for (SageApiActivityRequestObjects.ActivityAction a : activityActions)
            if (activityAction == a.name())
                return true;
        return false;
    }

    public class ProductTierSearchFilter {
        public String tierCode;
        public String tierRatePlanCode;
    }

    public static String[] getPicklistValues(String objectName, String fieldName) {
        String[] values = new String[]{};
        String[] types = new String[]{objectName};
        Schema.DescribeSobjectResult[] results = Schema.describeSObjects(types);
        for(Schema.DescribeSobjectResult res : results)
            for (Schema.PicklistEntry entry : res.fields.getMap().get(fieldName).getDescribe().getPicklistValues())
                if (entry.isActive())
                    values.add(entry.getValue());

        return values;
    }

    public static void ensureRecordOwner(sObject obj) {
        //sObject obj = [SELECT Owner.Id FROM Account WHERE id='0011x000001o3b9' LIMIT 1];
        SObject oObj = obj.getSobject('Owner');
        if (oObj == null) {
            System.debug('Owner=null');
            List<User> sysUsers = [SELECT Id FROM User WHERE IsActive=true AND UserName like: setting_ApiUserName+'%'];
            if (sysUsers == null || sysUsers.isEmpty()) return;
            obj.put('OwnerId', sysUsers[0].Id);
            System.debug('newOwner='+sysUsers[0].Id);
            return;
        }
        String userId = (String) oObj.get('Id');
        System.debug('Owner='+userId);
        if (String.isNotBlank(userId))
            return;
        List<User> sysUsers = [SELECT Id FROM User WHERE IsActive=true AND UserName like: setting_ApiUserName+'%'];
        if (sysUsers[0] == null || sysUsers.isEmpty()) return;
        obj.put('OwnerId', sysUsers[0].Id);
        System.debug('newOwner='+sysUsers[0].Id);
        return;
    }

/*    
    public static Date dateGmt(String dateString) {
        try {
            Datetime dt = DateTime.valueOfGmt(dateString);
            return dt.dateGmt();
        } catch (Exception ex) {
            return null;
        }
    }

    public static Date dateGmt(Datetime dt) {
        try {
            return dt.dateGmt();
        } catch (Exception ex) {
            return null;
        }
    }

    public static Boolean requires(String activityType, String source, String fieldName) {
        {  
           "CreateSubscription":{  
              "AppDirect":[  
                 "account.accountId",
                 "account.accountType",
                 "contact.contactId",
                 "contact.contactType",
                 "account.name",
                 "contact.email"
              ],
              "Tetris":[  
                 "account.accountId",
                 "account.accountType",
                 "contact.contactId",
                 "contact.contactType"
              ]
           }
        }

        Map<String, Map<String, List<String>>> activityRequired = new Map<String, Map<String, List<String>>>();
        Map<String, List<String>> sourceRequired = new Map<String, List<String>>();
        sourceRequired.put(
            SageApiActivityRequestObjects.Source.Tetris.name(),
            new List<String>{
                    'account.accountId', 'account.accountType', 'contact.contactId', 'contact.contactType'
            }
        );
        sourceRequired.put(
            SageApiActivityRequestObjects.Source.AppDirect.name(),
            new List<String>{
                'account.accountId', 'account.accountType', 'contact.contactId', 'contact.contactType', 'account.name', 'contact.email'
            }
        );
        activityRequired.put(SageApiActivityRequestObjects.ActivityType.CreateSubscription.name(), sourceRequired);
        System.debug(JSON.serialize(activityRequired));
    }
*/
}