/***
* @description  Lightning controller to provide details about existing List configurations
*               and get the corresponding data.
*               It provides default implementation for SOQL queries which may be overriden
*               by Apex classes overriding the sfpegListQuery_SVC virtual interface.
* @author       P-E GROS
* @date         April 2021
* @see          sfpegListQuery_SVC
* Legal Notice
* This code is the property of Salesforce.com and is protected by U.S. and International
* copyright laws. Reproduction, distribution without written permission of Salesforce is
* strictly prohibited. In particular this code has been delivered by Salesforce.com for
* its Clientâ€™s internal purposes pursuant to specific terms and conditions, and cannot be
* re-used, reproduced or distributed for any other purposes.
***/

public with sharing class sfpegList_CTL {

    /***
    * @description  Simple method to fetch configuration details for a List component.
    *               It provides the required input fields, the type of display (datatable...)
    *               and the corresponding display configuration.
    * @param        name    DeveloperName of the List configuration record
    * @return       Object  sfpegList__mdt record with DisplayType__c, DisplayConfig__c,
    *               QueryInput__c, FlattenResults__c, RowActions__c, MasterLabel
    *               fields filled in.
    * @exception    AuraHandledException    Raised if no configuration found for the provided name
    ***/
    @AuraEnabled(cacheable=true)
    public static Object getConfiguration(final String name) {
        System.debug(LoggingLevel.FINE,'getConfiguration: START with configuration name ' + name);

        List<sfpegList__mdt> configs = [    SELECT MasterLabel, DisplayType__c, DisplayConfig__c, QueryInput__c, DoPagination__c, QueryOrderBy__c,  FlattenResults__c, RowActions__c 
                                            FROM sfpegList__mdt
                                            WHERE DeveloperName =  :name];
        if ((configs == null) || (configs.size() != 1)) {
            throw new AuraHandledException('Configuration not found with name ' + name);
        }
        //System.debug(LoggingLevel.FINEST,'getConfiguration: END with configuration name ' + configs[0]);
        System.debug(LoggingLevel.FINE,'getConfiguration: END ' + configs[0].MasterLabel);
        return (Object) (configs[0]);
    }

    /***
    * @description  Standard method to fetch the list of records corresponding to a 
    *               preconfigured sfpegList__mdt query record in a specific context.
    * @param    name    Dev Name of the Query configuration record to execute
    * @param    input   Context Object record containing all the input data expected
    *                   by the query (based on its QueryInput__c field value)
    * @return   List<Object>  List of Objects corresponding to the result of the Query.
    * @exception   AuraHandledException If query configuration, apex implementation not found or if any
    *                                   SOQL issue is encountered (wrong query syntax).
    ***/
    @AuraEnabled
    public static List<Object> getData(final String name, final Object input) {
        System.debug('getData: START with configuration name ' + name);

        sfpegList__mdt query = getConfig(name);
        System.debug(LoggingLevel.FINE,'getData: query config fetched');

        if (query.QueryType__c == 'SOQL') {
            System.debug(LoggingLevel.FINE,'getData: executing SOQL query ' + query.QuerySOQL__c);
            String mergedQuery = mergeQuery(query.QuerySOQL__c, (Map<Object,Object>) input);
            System.debug(LoggingLevel.FINE,'getData: SOQL query merged ' + mergedQuery);

            try {
                System.debug('getData: END / triggering mergedQuery');
                return database.query(mergedQuery);
            }
            catch (Exception error) {
                System.debug(LoggingLevel.WARN,'getData: END / KO - ' + error.getMessage());
                throw new AuraHandledException('SOQL Query failure: ' + error.getMessage());
            }
        }
        else if (query.QueryType__c == 'Apex') {
            System.debug(LoggingLevel.FINE,'getData: executing Apex query ' + query.QueryClass__c);
            try {
                String methodName;
                sfpegListQuery_SVC listQueryInstance = getClassInstance(query.QueryClass__c,methodName);
                System.debug('getData: END invoking handler action for class');
                return listQueryInstance.getData(input,methodName);
            }
            catch(Exception error) {
                System.debug(LoggingLevel.WARN,'getData: END / KO - ' + error.getMessage());
                throw new AuraHandledException('Apex Query failure: ' + error.getMessage());
            }
        }
        else {
            System.debug(LoggingLevel.WARN,'getData: END / KO - Unsupported Configuration type' + query.QueryType__c);
            throw new AuraHandledException('Unsupported Configuration type ' + query.QueryType__c + ' for config ' + name);
        }
    }

    /***
    * @description  If lazy loading is configured on the List LWC component, all records are not
    *               returned at once. In such a case the getData() method is not used but 2 
    *               separate methods arre available to fetch the total number of results and
    *               each result set independently.
    *               This method meets the first need.
    * @param    name    Dev Name of the Query configuration record to execute
    * @param    input   Context Object record containing all the input data expected
    *                   by the query (based on its QueryInput__c field value)
    * @return   Integer Number of results of the Query.
    * @exception    AuraHandledException    If query configuration, apex implementation not found or if any
    *                                       SOQL issue is encountered (wrong query syntax).
    ***/
    @AuraEnabled
    public static Integer getCount(final String name, final Object input) {
        System.debug('getCount: START with name ' + name);

        sfpegList__mdt query = getConfig(name);
        System.debug(LoggingLevel.FINE,'getCount: query config fetched');

        if (query.QueryType__c == 'SOQL') {
            System.debug(LoggingLevel.FINE,'getCount: executing count query ' + query.QueryCount__c);
            String mergedQuery = mergeQuery(query.QueryCount__c, (Map<Object,Object>) input);
            System.debug(LoggingLevel.FINE,'getCount: count query merged ' + mergedQuery);

            try {
                System.debug('getCount: END / triggering mergedQuery');
                return database.countQuery(mergedQuery);
            }
            catch (Exception error) {
                System.debug(LoggingLevel.WARN,'getCount: END / KO - ' + error.getMessage());
                throw new AuraHandledException('Count Query failure: ' + error.getMessage());
            }
        }
        else if (query.QueryType__c == 'Apex') {
            System.debug(LoggingLevel.FINE,'getCount: executing Apex query ' + query.QueryClass__c);
            try {
                String methodName;
                sfpegListQuery_SVC listQueryInstance = getClassInstance(query.QueryClass__c,methodName);
                System.debug('getCount: END invoking handler action for class');
                return listQueryInstance.getCount(input,methodName);
            }
            catch(Exception error) {
                System.debug(LoggingLevel.WARN,'getCount: END / KO - ' + error.getMessage());
                throw new AuraHandledException('Apex Count failure: ' + error.getMessage());
            }
        }
        else {
            System.debug(LoggingLevel.WARN,'getCount: END / KO - Unsupported Configuration type' + query.QueryType__c);
            throw new AuraHandledException('Unsupported Configuration type ' + query.QueryType__c + ' for config ' + name);
        }
    }   

    /***
    * @description  If lazy loading is configured on the List LWC component, all records are not
    *               returned at once. In such a case the getData() method is not used but 2 
    *               separate methods arre available to fetch the total number of results and
    *               each result set independently.
    *               This method meets the second need, an offset being provided to progressively
    *               request each set of record.
    * @param    name        Dev Name of the Query configuration record to execute
    * @param    input       Context Object record containing all the input data expected
    *                       by the query (based on its QueryInput__c field value)
    * @param    lastRecord  Pagination field value of the previous last record returned (null at first pagination)
    * @return   List<Object>  List of Objects corresponding to the result of the Query.
    * @exception   AuraHandledException If query configuration, apex implementation not found or if any
    *                                   SOQL issue is encountered (wrong query syntax).
    ***/
    @AuraEnabled
    public static List<Object> getPaginatedData(final String name, final Object input , final String lastRecord) {
        System.debug('getPaginatedData: START with configuration name ' + name);
        System.debug(LoggingLevel.FINE,'getPaginatedData: input provided ' + input);
        System.debug(LoggingLevel.FINE,'getPaginatedData: lastRecord provided ' + lastRecord);

        sfpegList__mdt query = getConfig(name);
        System.debug(LoggingLevel.FINE,'getPaginatedData: query config fetched');

        if (query.QueryType__c == 'SOQL') {
            System.debug(LoggingLevel.FINE,'getPaginatedData: executing count query ' + query.QuerySOQL__c);
            
            if (!(query.QuerySOQL__c).contains('{{{PAGE}}}')) {
                System.debug(LoggingLevel.WARN,'getPaginatedData: END / KO - Missing {{{PAGE}}} key in configured SOQL query');
                throw new AuraHandledException('Paginated SOQL Query failure: Missing {{{PAGE}}} key in configured query');
            }

            Map<Object,Object> pageInput = initPagination(query.QueryOrderBy__c,query.QueryOrder__c,lastRecord);
            pageInput.putAll((Map<Object,Object>)input);
            System.debug(LoggingLevel.FINE,'getPaginatedData: pagination Input init ' + pageInput);

            String mergedQuery = mergeQuery(query.QuerySOQL__c, pageInput);
            System.debug(LoggingLevel.FINE,'getPaginatedData: paginated SOQL query merged ' + mergedQuery);

            try {
                System.debug('getPaginatedData: END / triggering mergedQuery');
                return database.query(mergedQuery);
            }
            catch (Exception error) {
                System.debug(LoggingLevel.WARN,'getPaginatedData: END / KO - ' + error.getMessage());
                throw new AuraHandledException('Paginated SOQL Query failure: ' + error.getMessage());
            }
        }
        else if (query.QueryType__c == 'Apex') {
            System.debug(LoggingLevel.FINE,'getPaginatedData: executing Apex query ' + query.QueryClass__c);
            try {
                String methodName;
                sfpegListQuery_SVC listQueryInstance = getClassInstance(query.QueryClass__c,methodName);
                System.debug('getPaginatedData: END invoking handler action for class');
                return listQueryInstance.getPaginatedData(input,methodName,lastRecord);
            }
            catch(Exception error) {
                System.debug(LoggingLevel.WARN,'getPaginatedData: END / KO - ' + error.getMessage());
                throw new AuraHandledException('Paginated Apex action failure: ' + error.getMessage());
            }
        }
        else {
            System.debug(LoggingLevel.WARN,'getCount: END / KO - Unsupported Configuration type' + query.QueryType__c);
            throw new AuraHandledException('Unsupported Configuration type ' + query.QueryType__c + ' for config ' + name);
        }
    }


    //######################################################################
    //###################### PRIVATE UTILITIES #############################
    //######################################################################

    /***
    * @description Private utility method to fetch processing information for a List
    *              query configuration, given its developer Name.
    * @param       name             Dev Name of the Query configuration record 
    * @return      sfpegList__mdt   Query execution details (depending on type)
    * @exception   AuraHandledException If no Configuration found.
    ***/
    private static sfpegList__mdt getConfig(final String name) {
        System.debug(LoggingLevel.FINE,'getConfig: START for name ' + name);

        List<sfpegList__mdt> configs = [    SELECT MasterLabel, QueryType__c, QueryClass__c, QuerySOQL__c, QueryCount__c, QueryOrderBy__c, QueryOrder__c  
                                            FROM sfpegList__mdt
                                            WHERE DeveloperName =  :name];
        if ((configs == null) || (configs.size() != 1)) {
            throw new AuraHandledException('Configuration not found with name ' + name);
        }
        //System.debug(LoggingLevel.FINEST,'getConfiguration: END with configuration name ' + configs[0]);
        System.debug(LoggingLevel.FINE,'getConfig: END ' + configs[0].MasterLabel);
        return configs[0];
    }

    /***
    * @description  Private utility method to merge the context inputs withing a query
    *               template. It executes tag replacement for all tokens mentioned within
    *               the input map.
    * @param        queryTemplate   SOSL or SOQL query string template containing merge
    *                               tokens (as {{{XXX.xxxxx}}} tags) to be replaced.
    * @param        inputMap        Map of input tokens by domain
    * @return       String          Merged query.
    * @exception    AuraHandledException If no queryTemplate provided.
    ***/
    private static String mergeQuery(final String queryTemplate, Map<Object,Object> inputMap) {
        System.debug('mergeQuery: START with ' + queryTemplate);
        System.debug(LoggingLevel.FINE,'mergeQuery: inputMap provided ' + inputMap);

        if (String.isEmpty(queryTemplate)) {
            System.debug(LoggingLevel.WARN,'mergeQuery: END KO / missing queryTemplate ');
            throw new AuraHandledException('No SOSL/SOQL query configured!');
        }

        String mergedQuery = queryTemplate;
        for (Object iter : inputMap.keySet()) {
            System.debug(LoggingLevel.FINEST,'mergeQuery: processing token ' + iter);
            mergedQuery = mergedQuery.replaceAll('\\{\\{\\{' + iter + '\\}\\}\\}', '' + inputMap.get(iter));
        }
        System.debug('mergeQuery: END with  ' + mergedQuery);
        return mergedQuery;
    }

    /***
    * @description Private utility method to fetch an instance of the configured Apex action.
    * @param       actionName           Action names as the API name of the class to be instantiated (may be class.method)
    * @param       methodName           methodName extracted from the action name (if any)
    * @return      sfpegListQuery_SVC   Instance of the class
    * @exception   AuraHandledException If no class provided found or class not found
    ***/
    private static sfpegListQuery_SVC getClassInstance(final String actionName, String methodName) {
        System.debug('getClassInstance: START for actionName ' + actionName);

        if (String.isEmpty(actionName)) {
            System.debug(LoggingLevel.WARN,'getClassInstance: END KO / missing actionName ');
            throw new AuraHandledException('No action name provided!');
        }

        String className = actionName;
        methodName = null;
        if (actionName.contains('.')) {
            System.debug('getClassInstance: splitting action in class and method');
            String[] parts = className.split('\\.');
            className = parts[0];
            methodName = parts[1];
        }
        System.debug(LoggingLevel.FINEST,'getClassInstance: className set '  + className);
        System.debug(LoggingLevel.FINEST,'getClassInstance: methodName set ' + methodName);
      
        Type actionClass = Type.forName(className);
        if (null == actionClass) {
            System.debug(LoggingLevel.WARN,'getClassInstance: END KO / action handler not found for action ' + actionName);
            throw new AuraHandledException('Handler class for action ' + actionName + ' not found!');
        }
        
        System.debug('getClassInstance: END / returning instance');
        return (sfpegListQuery_SVC) actionClass.newInstance();
    }

    /***
    * @description  Private utility method to initialize a pagination clause, as a set of 
    *               specific merge tokens & values. For now, only a {{{PAGE}}} token is
    *               considered / initialized.
    * @param        fieldName           API Name of the field used for pagination
    * @param        orderDir            Direction of the Order by clause (asc / desc)
    * @param        lastValue           Pagination field value of the last record already fetched.
    * @return       Map<Object,Object>   Map of merge token values dedicated to pagination?
    * @exception    AuraHandledException If no fieldName provided
    ***/
    private static Map<Object,Object> initPagination(final String fieldName, final String orderDir, final String lastValue) {
        System.debug('initPagination: START with field ' + fieldName);
        System.debug(LoggingLevel.FINE,'initPagination: direction provided ' + orderDir);
        System.debug(LoggingLevel.FINE,'initPagination: lastValue provided ' + lastValue);

        if (String.isEmpty(fieldName)) {
            System.debug(LoggingLevel.WARN,'initPagination: END / KO - Missing orderBy field configuration');
            throw new AuraHandledException('Paginated Query failure: No OrderBy field configured');
        }
        
        String paginationClause = ' Id != null '; // default initial page clause.
        if (String.isNotEmpty(lastValue)) {
            System.debug(LoggingLevel.FINE,'initPagination: computing clause');
            paginationClause = fieldName + ((orderDir == 'ASC') ? ' > \'' : ' < \'') + lastValue + '\'';
        }
        
        Map<Object,Object> returnMap = new Map<Object,Object>{
            'PAGE' => paginationClause
        };

        System.debug('initPagination: END returning  ' + returnMap);
        return returnMap;
    }

}