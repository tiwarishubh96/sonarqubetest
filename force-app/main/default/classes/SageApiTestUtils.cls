@IsTest
public class SageApiTestUtils {
    static public void setup()
    {
        try {
            List<PayNowSetting__c> pnSettings = new List<PayNowSetting__c> {
                    new PayNowSetting__c( Name = 'payNowBaseUrl', Value__c = 'payNowBaseUrl' ),
                    new PayNowSetting__c( Name = 'payNowServiceUserName', Value__c = 'payNowServiceUserName' ),
                    new PayNowSetting__c( Name = 'payNowServicePassword', Value__c = 'payNowServicePassword' )
            };
            insert pnSettings;
        } catch ( Exception ex ) { System.debug( LoggingLevel.ERROR, ex.getMessage() + '\n' + ex.getStackTraceString() ); }

        try {
            List<SageApiActivitySetting__c> apiSettings = new List<SageApiActivitySetting__c>{
                    new SageApiActivitySetting__c( Name = 'AutoGeneratedEmailSuffix', Value__c = '.sage1dev' ),
                    new SageApiActivitySetting__c( Name = 'QuoteTemplateZuoraId', Value__c = '2c92c0f852b47ece0152cd20132c0ce6' ),
                    new SageApiActivitySetting__c( Name = 'QuoteTemplateSalesforceId', Value__c = 'a138E000000h0ny' ),
                    new SageApiActivitySetting__c( Name = 'CustomerCommunityUserProfileName', Value__c = 'Customer Community User' ),
                    new SageApiActivitySetting__c( Name = 'SalesforceSoapServiceUrl', Value__c = '/services/Soap/u/37.0/' ),
                    new SageApiActivitySetting__c( Name = 'ZuoraGenerateQuoteUrl', Value__c = 'https://zuora.com/apps/servlet/GenerateQuote' ),
                    new SageApiActivitySetting__c( Name = 'ZuoraGenerateQuoteUrl_sandbox', Value__c = 'https://apisandbox-zforsf.zuora.com/apps/servlet/GenerateQuote' ),
                    new SageApiActivitySetting__c( Name = 'CustomerCommunityName', Value__c = 'Sage Customer Community' ),
                    new SageApiActivitySetting__c( Name = 'PartnerCommunityName', Value__c = 'Sage Partner Community' ),
                    new SageApiActivitySetting__c( Name = 'CustomerCommunityType', Value__c = 'Customer' ),
                    new SageApiActivitySetting__c( Name = 'PartnerCommunityType', Value__c = 'Partner' ),
                    new SageApiActivitySetting__c( Name = 'EnableDebug', Value__c = 'true' ),
                    new SageApiActivitySetting__c( Name = 'EnableLogging', Value__c = 'true' ),
                    new SageApiActivitySetting__c( Name = 'CustomerCommunityAdminRoleName', Value__c = 'Customer Account Administrator' ),
                    new SageApiActivitySetting__c( Name = 'CustomerCommunityUserRoleName', Value__c = 'Customer User' ),
                    new SageApiActivitySetting__c( Name = 'MaxAttemptsPerStep', Value__c = '100' ),
                    new SageApiActivitySetting__c( Name = 'RetryTimerDefinition', Value__c = '1,3,5' ),
                    new SageApiActivitySetting__c( Name = 'DisableActivityQueue', Value__c = 'false'),
                    new SageApiActivitySetting__c( Name = 'HttpCalloutDefaultMaxRetries', Value__c = '5'),
                    new SageApiActivitySetting__c( Name = 'HttpCalloutDefaultTimeoutInSeconds', Value__c = '30'),
                    new SageApiActivitySetting__c( Name = 'OpportunityLeadSource', Value__c = 'Marketing'),
                    new SageApiActivitySetting__c( Name = 'OpportunityStageEvaluating', Value__c = 'Discovery'),
                    new SageApiActivitySetting__c( Name = 'OpportunityStageClosedWon', Value__c = 'Closed Won'),
                    new SageApiActivitySetting__c( Name = 'OpportunityClosedWonReason', Value__c = 'No reason specified'),
                    new SageApiActivitySetting__c( Name = 'ApiUserName', Value__c = 'apiuser@sage.com'),
                    new SageApiActivitySetting__c( Name = 'DisablePlatformEvent', Value__c = 'false')
            };
            insert apiSettings;

        } catch ( Exception ex ) { System.debug( LoggingLevel.ERROR, ex.getMessage() + '\n' + ex.getStackTraceString() ); }
    }

    static public void setupCommunity()
    {
        CommunityX__c comm = new CommunityX__c(
                Name = 'Sage Customer Community'
                , Default_User_Profile__c = 'Customer Community User'
                , Community_Base_Url__c = 'example.com/community'
                , Invite_Page_Path__c = 'example.com/invite'
                , Sage_SSO_Post_Register_Failure_Page__c = 'example.com/post-register-failure'
                , Sage_SSO_Post_Register_Success_Page__c = 'example.com/post-register-success'
                , CommunityId__c = 'Customer'
        );
        insert comm;

        Community_Role__c commRole = new Community_Role__c( Name = 'Customer Account Administrator', Community__c = comm.Id );
        insert commRole;
    }

    static public void setupLocale(){
        List<Locale__c> locales = [SELECT ID FROM Locale__c];
        if (!locales.isEmpty()) return;

        locales = new List<Locale__c>();
        locales.add(new Locale__c(BillingBatch__c='Batch1',Country__c='US - United States',CurrencyIsoCode='USD',Default_Locale__c='Yes',Language__c='English',Name='en_US',PayNow_EmailTemplateName__c='PayNow Complete',SalesOffice__c='Atlanta CBC',TimeZone__c='America/New_York',LanguageLocaleKey__c='en_US'));
        locales.add(new Locale__c(BillingBatch__c='Batch1',Country__c='CA - Canada',CurrencyIsoCode='CAD',Default_Locale__c='Yes',Language__c='English',Name='en_CA',PayNow_EmailTemplateName__c='PayNow Complete',SalesOffice__c='Atlanta CBC',TimeZone__c='America/New_York',LanguageLocaleKey__c='en_US'));
        insert locales;
    }

    static public void setupApiUser() {
        Profile p = [SELECT Id FROM Profile WHERE Name='System Administrator'];
        User user = new User(UserName=SageApiActivityUtils.setting_ApiUserName,email='test@test.com',Alias='auser',
                EmailEncodingKey='UTF-8', LastName='Testing', LanguageLocaleKey='en_US',
                LocaleSidKey='en_GB', ProfileId = p.Id, TimeZoneSidKey='Europe/London');
        insert user;
    }

    static public User createUser(Contact con) {
        Profile p = [SELECT Id FROM Profile WHERE Name='Sage: Customer Community User'];
        User u = new User(Alias = 'commuser', Email='communitiesUSer@sage.com',
                EmailEncodingKey='UTF-8', LastName='Testing', LanguageLocaleKey='en_US',
                LocaleSidKey='en_GB', ProfileId = p.Id,
                TimeZoneSidKey='Europe/London', UserName='communitiesuser@sage.com', ContactId= con.Id);

        return u;
    }

    static public SageApiActivity__c createActivity( String activityType, String payload )
    {
        SageApiActivity__c activity = new SageApiActivity__c();
        activity.Name = GenericUtilities.getRandomUUIDv4();
        activity.ActivityType__c = activityType;
        activity.ActivityID__c = activityType + activity.Name;
        activity.Payload__c = payload;

        return activity;
    }

    static public void setupProductCatalog() {
        setupLocale();
        Locale__c loc = [SELECT ID FROM Locale__c LIMIT 1];
        zqu__ZProduct__c zproduct = new zqu__ZProduct__c();
        zproduct.Name = 'Sage One';
        zproduct.zqu__Category__c = 'Base Products';
        zproduct.zqu__EffectiveEndDate__c = System.today().addYears( 100 );
        zproduct.zqu__EffectiveStartDate__c = System.today().addYears( -10 );
        zproduct.zqu__SKU__c = '1';
        zproduct.zqu__ZuoraId__c = 'p1';
        insert zproduct;

        zqu__ProductRatePlan__c rate = new zqu__ProductRatePlan__c();
        rate.Name = 'Kryptonite';
        rate.zqu__ZProduct__c = zproduct.Id;
        rate.zqu__EffectiveEndDate__c = System.today().addYears( 100 );
        rate.zqu__EffectiveStartDate__c = System.today().addYears( -10 );
        rate.zqu__ZuoraId__c = 'r1';
        insert rate;

        zqu__ProductRatePlanCharge__c rateCharge = new zqu__ProductRatePlanCharge__c();
        rateCharge.Name = 'Charge';
        rateCharge.zqu__ZuoraId__c = 'rc1';
        rateCharge.zqu__Type__c = 'Recurring';
        rateCharge.zqu__RecurringPeriod__c = 'Month';
        rateCharge.zqu__ProductRatePlan__c = rate.Id;
        rateCharge.zqu__Model__c = 'Flat Fee Pricing';
        insert rateCharge;

        zqu__ProductRatePlanChargeTier__c rateChargeTier = new zqu__ProductRatePlanChargeTier__c();
        //SELECT Id,IsDeleted,Name,zqu__Currency__c,zqu__Deleted__c,zqu__EndingUnit__c,zqu__IsOveragePrice__c,
        //zqu__PriceFormat__c,zqu__Price__c,zqu__ProductRatePlanCharge__c,zqu__StartingUnit__c,zqu__Tier__c,zqu__ZuoraId__c 
        //FROM zqu__ProductRatePlanChargeTier__c
        rateChargeTier.Name = '1';
        rateChargeTier.zqu__Currency__c = 'USD';
        rateChargeTier.zqu__PriceFormat__c = 'Flat Fee';
        rateChargeTier.zqu__Price__c = 20.0;
        rateChargeTier.zqu__ProductRatePlanCharge__c = rateCharge.Id;
        rateChargeTier.zqu__Tier__c = 1.0;
        rateChargeTier.zqu__ZuoraId__c = '2c92c0f84e4d2bc3014e6df5a9d012a2';
        insert rateChargeTier;

        Product_Tier__c tier = new Product_Tier__c();
        tier.Name = 'Sage One';
        tier.Product_Tier_Code__c = 'SageOne-Start-US';
        tier.Product_Use_Region__c = 'US - United States';
        tier.ZProduct__c = zproduct.Id;
        tier.PayNow_PageType__c = 'SageOne';
        insert tier;

        Product_Tier_Rate_Plan__c plan = new Product_Tier_Rate_Plan__c();
        plan.Name = 'Monthly';
        plan.End_Date__c = System.today().addDays( 100 );
        plan.Start_Date__c = System.today().addYears( -1 );
        plan.Trial_Period__c = 30;
        plan.Product_Tier__c = tier.Id;
        plan.Product_Rate_Plan__c = rate.Id;
        plan.Payment_Grace_Period__c = 0;
        plan.CurrencyIsoCode = 'USD';
        plan.Locale__c = loc.Id;
        insert plan;

        PricingCode__c pricingCode = new PricingCode__c();
        pricingCode.Name = '_LIST';
        pricingCode.Product_Tier__c = tier.Id;
        pricingCode.ProductTierRatePlanCode__c = plan.Id;
        pricingCode.End_Date__c = System.today().addDays( 100 );
        insert pricingCode;

        PricingCodeCharge__c pricingCodeCharge = new PricingCodeCharge__c();
        pricingCodeCharge.Pricing_Code__c = pricingCode.Id;
        pricingCodeCharge.ProductTier__c = tier.Id;
        pricingCodeCharge.ProductTierRatePlan__c = plan.Id;
        pricingCodeCharge.Product_Rate_Plan__c = rate.Id;
        pricingCodeCharge.Product_Rate_Plan_Charge__c = rateCharge.Id;
        pricingCodeCharge.ZProduct__c = zproduct.Id;
        insert pricingCodeCharge;

        //// for legacy test
        Product2 zproduct2 = new Product2();
        zproduct2.Name = 'Sage One';
        zproduct2.zqu__Category__c = 'Base Products';
        zproduct2.zqu__EffectiveEndDate__c = System.today().addYears( 100 );
        zproduct2.zqu__EffectiveStartDate__c = System.today().addYears( -10 );
        zproduct2.zqu__SKU__c = '1';
        zproduct2.zqu__ZuoraId__c = 'p2';
        insert zproduct2;

        zqu__ProductRatePlan__c rate2 = new zqu__ProductRatePlan__c();
        rate2.Name = 'Kryptonite';
        rate2.zqu__Product__c = zproduct2.Id;
        rate2.zqu__EffectiveEndDate__c = System.today().addYears( 100 );
        rate2.zqu__EffectiveStartDate__c = System.today().addYears( -10 );
        rate2.zqu__ZuoraId__c = 'r2';
        insert rate2;

        Product_Tier__c tier2 = new Product_Tier__c();
        tier2.Name = 'Sage One';
        tier2.Product_Tier_Code__c = 'SageOne-Start-US-Test';
        tier2.Product_Use_Region__c = 'US - United States';
        tier2.Product__c = zproduct2.Id;
        tier2.PayNow_PageType__c = 'SageOne';
        tier2.Trial_Period__c = 30;
        insert tier2;

        Product_Tier_Rate_Plan__c plan2 = new Product_Tier_Rate_Plan__c();
        plan2.Name = 'Monthly';
        plan2.End_Date__c = System.today().addDays( 100 );
        plan2.Start_Date__c = System.today().addYears( -1 );
        plan2.Trial_Period__c = 30;
        plan2.Product_Tier__c = tier2.Id;
        plan2.Product_Rate_Plan__c = rate2.Id;
        plan2.Payment_Grace_Period__c = 0;
        plan2.CurrencyIsoCode = 'GBP';
        plan2.Locale__c = loc.Id;
        insert plan2;
    }

    static public void setupChannelPlatform() {
        List<ChannelPlatform__c> platforms = new List<ChannelPlatform__c>();
        platforms.add(new ChannelPlatform__c(Name='AppDirect', ChannelPlatformKey__c='AppDirect'));
        platforms.add(new ChannelPlatform__c(Name='Tetris', ChannelPlatformKey__c='Tetris'));
        insert platforms;
    }

    static public SageApiTryNowActivityRequest createTryNowPayload()
    {
        String identityId = GenericUtilities.getRandomUUIDv4();

        SageApiTryNowActivityRequest payload = new SageApiTryNowActivityRequest();
        payload.startDate = System.now().format('yyyy-MM-dd');
        payload.endDate = System.now().addDays( 30 ).format('yyyy-MM-dd');
        payload.contact = new SageApiActivityRequestObjects.Contact();
        payload.contact.identityId = identityId;
        payload.contact.identityType = 'SageID';
        payload.contact.firstName = 'Some';
        payload.contact.lastName = 'One';
        payload.contact.email = 'someone@example.com';
        payload.contact.city = 'London';
        payload.contact.postalCode = 'SW1A 2AA';
        payload.contact.countryCode = 'GB';
        payload.account = new SageApiActivityRequestObjects.Account();
        payload.account.name = 'Noone Ltd';
        payload.account.address1 = 'Downing Street';
        payload.account.city = 'London';
        payload.account.countryCode = 'GB';
        payload.account.postalCode = 'SW1A 2AA';
        payload.products = new List<SageApiActivityRequestObjects.Product>();
        payload.products.add( new SageApiActivityRequestObjects.Product() );
        payload.products[0].tierCode = 'SageOne-Start-US';
        payload.products[0].tierRatePlanCode = 'Monthly';
        return payload;
    }

    static public SageApiTryNowConvertActivityRequest createTryNowConvertPayload(String accountId, String quoteId)
    {
        String identityId = GenericUtilities.getRandomUUIDv4();

        SageApiTryNowConvertActivityRequest payload = new SageApiTryNowConvertActivityRequest();
        payload.quoteId = quoteId;
        payload.accountId = accountId;
        return payload;
    }

    static public SageApiBuyNowActivityRequest createBuyNowPayload()
    {
        String identityId = GenericUtilities.getRandomUUIDv4();

        SageApiBuyNowActivityRequest payload = new SageApiBuyNowActivityRequest();
        payload.startDate = System.now().format('yyyy-MM-dd');
        payload.endDate = System.now().addDays( 30 ).format('yyyy-MM-dd');
        payload.contact = new SageApiActivityRequestObjects.Contact();
        payload.contact.identityId = identityId;
        payload.contact.identityType = 'SageID';
        payload.contact.firstName = 'Some';
        payload.contact.lastName = 'One';
        payload.contact.email = 'someone@example.com';
        payload.contact.city = 'London';
        payload.contact.postalCode = 'SW1A 2AA';
        payload.contact.countryCode = 'GB';
        payload.account = new SageApiActivityRequestObjects.Account();
        payload.account.name = 'Noone Ltd';
        payload.account.address1 = 'Downing Street';
        payload.account.city = 'London';
        payload.account.countryCode = 'GB';
        payload.account.postalCode = 'SW1A 2AA';
        payload.account.paymentMethodId = '2c92c0f9591b6eab01591e56ecea3cd6';
        payload.account.paymentMethodType = 'Credit Card';
        payload.products = new List<SageApiActivityRequestObjects.Product>();
        payload.products.add( new SageApiActivityRequestObjects.Product() );
        payload.products[0].tierCode = 'SageOne-Start-US';
        payload.products[0].tierRatePlanCode = 'Monthly';
        return payload;
    }

    static public SageApiAddCommUserActivityRequest createAddCommUserPayload(String accountId)
    {
        String identityId = GenericUtilities.getRandomUUIDv4();

        SageApiAddCommUserActivityRequest payload = new SageApiAddCommUserActivityRequest();
        payload.AccountId = accountId;
        payload.identityId = identityId;
        payload.identityType = 'SageID';
        payload.firstName = 'Some';
        payload.lastName = 'One';
        payload.email = 'someone@example.com';
        payload.city = 'London';
        payload.postalCode = 'SW1A 2AA';
        payload.countryCode = 'GB';
        payload.communityType = 'Customer';
        payload.communityRole = 'Customer Account Administrator';
        return payload;
    }

    static public SageApiTryNowLeadActivityRequest createTryNowLeadPayload()
    {
        String identityId = GenericUtilities.getRandomUUIDv4();

        SageApiTryNowLeadActivityRequest payload = new SageApiTryNowLeadActivityRequest();
        payload.companyName = 'Test Company';
        payload.products = new List<SageApiActivityRequestObjects.Product>();
        payload.products.add( new SageApiActivityRequestObjects.Product() );
        payload.products[0].tierCode = 'SageOne-Start-US';
        payload.products[0].tierRatePlanCode = 'Monthly';
        return payload;
    }

    static public SageApiActivity__c createCreateSubscriptionV2Activity()
    {
        String activityType = SageApiActivityTriggerHandler.CreateSubscriptionActivityType;
        Date d = date.today();
        String startDate = DateTime.newInstance(d.year(),d.month(),d.day()).format('yyyy-MM-dd');
        Date nd = d.addDays(30);
        String endDate = DateTime.newInstance(nd.year(),nd.month(),nd.day()).format('yyyy-MM-dd');
        string guid = GenericUtilities.getRandomUUIDv4();

        String template = '{"subscriptionGroupId":null,"managingAccount":{"id":"0016E00000QxfVMQAZ"},"links":[{"url":"https://test.com","service":"SubscriptionManagement"}],"isTrial":true,"entitledAccount":{"id":"0016E00000QxfVNQAZ"},"effectivePeriod":{"notBefore":"2018-01-13","notAfter":"2018-02-12"},"customerContact":{"id":"0036E00000K1QXLQA3"},"partner":{"account":{"id":"0016E00000QxfVNQAZ"}, "contact":{"id":"0036E00000K1QXLQA3"}},"clientRef":"S-400675702","channelPlatform":"Sage","channelPartner":"TetrisV2","subscriptionId":"ba358f2e-f272-45b5-74f4-197b57289b37","state":"Active","products":[{"product":"sageonestart","features":[{"properties":[{"value":"SomeValue","name":"SomeProperty"}],"name":"SomeFeature"}]},{"product":"sageonepayroll","features":[{"properties":[{"value":"SomeValue","name":"SomeProperty"}],"name":"SomeFeature"}]}],"entitlement":{"products":[{"product":"SageoneStart","launchUrl":"https://someUrl.com"},{"product":"SageonePayroll","launchUrl":"https://someUrl.com"}],"entitlementId":"49883812-c8d2-42f7-faa2-92aacf9f264d"},"customerCommunityUsers":[{"role":"admin","identity":{"idpProperties":[{"value":"SomeValue","name":"SomeProperty"}],"idpId":"9f37d6b9-27fa-4c2c-8e79-4b8bc3a3993d","idp":"SageID"},"contactId":"0036E00000K1QXLQA3"}]}';
        Account macc = new Account(Name = 'Accountant '+string.valueOf(Math.abs(GenericUtilities.getRandom())), BillingCountryCode = 'US', Sales_Office__c = 'Atlanta CBC', locale_billing_cc__c = 'US' );
        insert macc;
        Account acc = new Account(Name = 'Business '+string.valueOf(Math.abs(GenericUtilities.getRandom())), BillingCountryCode = 'US', Sales_Office__c = 'Atlanta CBC', locale_billing_cc__c = 'US' );
        insert acc;
        Contact con = new Contact(email = string.valueOf(Math.abs(GenericUtilities.getRandom()))+'@testemail.com', firstName = 'Test', lastName = 'User', accountId = macc.Id, MailingCity = 'New York', MailingCountry = 'United States', MailingPostalCode = '10082', Language__c = 'English', ELanguage__c = 'EN');
        insert con;
        SageApiActivityRequestObjects.SubscriptionAllData req = (SageApiActivityRequestObjects.SubscriptionAllData) JSON.deserialize(template, SageApiActivityRequestObjects.SubscriptionAllData.class);
        req.clientRef = 'S-'+string.valueOf(Math.abs(GenericUtilities.getRandom()));
        req.effectivePeriod.notBefore = startDate;
        req.effectivePeriod.notAfter = endDate;
        req.entitledAccount.id = acc.Id;
        req.managingAccount.id = macc.Id;
        req.customerContact.id = con.Id;
        req.partner.account.id = acc.Id;
        req.partner.contact.id = con.Id;
        req.customerCommunityUsers[0].contactId = con.Id;
        req.customerCommunityUsers[0].identity.idpId = GenericUtilities.getRandomUUIDv4();
        req.subscriptionId = GenericUtilities.getRandomUUIDv4();
        req.entitlement.entitlementId = GenericUtilities.getRandomUUIDv4();

        SageApiActivity__c activity = new SageApiActivity__c(ActivityStatus__c=SageApiStatus.InProgressExternal,ActivityType__c=activityType,ActivityTypeVersion__c=2,Name =guid,ActivityID__c=activityType+':'+guid,ChannelPlatformProvided__c='Tetris',ChannelPartnerProvided__c='Tetris',Payload__c=JSON.serialize(req),SubscriptionId__c=req.subscriptionId,SubscriptionGroupId__c=GenericUtilities.getRandomUUIDv4(),ApiStartTime__c=DateTime.now());
        return activity;
    }

    static public SageApiActivity__c createCreateSubscriptionV2Artifacts()
    {
        String activityType = SageApiActivityTriggerHandler.CreateSubscriptionActivityType;
        Date d = date.today();
        String startDate = DateTime.newInstance(d.year(),d.month(),d.day()).format('yyyy-MM-dd');
        Date nd = d.addDays(30);
        String endDate = DateTime.newInstance(nd.year(),nd.month(),nd.day()).format('yyyy-MM-dd');
        string guid = GenericUtilities.getRandomUUIDv4();
        String cbcSubscriptionId = GenericUtilities.getRandomUUIDv4();
        String entitlementId = GenericUtilities.getRandomUUIDv4();

        String template = '{ "subscriptionGroupId":"GROUP123", "clientRef":null, "channelPlatform":"Tetris", "channelPartner":"Tetris", ' +
                '"isTrial":true, "entitledAccount":{"id":"00N0E000000MCkY"}, "managingAccount":{"id":"a210E000000Jc7s"}, ' +
                '"customerContact":{"id":"0PS24000000O3DC"}, "products":[{ "product":"sageonestart", ' +
                '"features":[{ "properties":[{ "value":"SomeValue", "name":"SomeProperty"} ], "name":"SomeFeature"} ]},' +
                '{ "product":"sageonepayroll", "features":[{ "properties":[{ "value":"SomeValue", "name":"SomeProperty"} ], "name":"SomeFeature"} ]} ], ' +
                '"effectivePeriod":{"notBefore":"2017-10-01","notAfter":"2017-10-31" }, ' +
                '"customerCommunityUsers":[{ "role":"admin", "identity":{"idpProperties":[ {"value":"SomeValue","name":"SomeProperty" }],' +
                '"idpId":"5a7b641e-330d-470b-b9bd-4bda44867fed","idp":"SageID" }, "contactId":"0030E00000CUVTm"} ], ' +
                '"productUsers":[{ "identity":{"idpProperties":[ {"value":"SomeValue","name":"SomeProperty" }],' +
                '"idpId":"5a7b641e-330d-470b-b9bd-4bda44867fed","idp":"SageID" }, ' +
                '"products":[{ "tierCode":"sageonestart", "role":"admin"} ]} ], "links":[{"service":"SubscriptionManagement","url":"https://test.com"}]}';
        Account macc = new Account(Name = 'Accountant '+string.valueOf(Math.abs(GenericUtilities.getRandom())), BillingCountryCode = 'US', Sales_Office__c = 'Atlanta CBC', locale_billing_cc__c = 'US',Global_Id__c=String.ValueOf(Math.round((Math.random() * (900000) + 100000))+Datetime.now().millisecond()));
        insert macc;
        Account acc = macc;
        Contact con = new Contact(email = string.valueOf(Math.abs(GenericUtilities.getRandom()))+'@testemail.com', firstName = 'Test', lastName = 'User', accountId = macc.Id, MailingCity = 'New York', MailingCountry = 'United States', MailingPostalCode = '10082', Language__c = 'English', ELanguage__c = 'EN',Global_Id__c=String.ValueOf(Math.round((Math.random() * (900000) + 200000))+Datetime.now().millisecond()));
        insert con;
        SageApiActivityRequestObjects.SubscriptionRequest req = (SageApiActivityRequestObjects.SubscriptionRequest) JSON.deserialize(template, SageApiActivityRequestObjects.SubscriptionRequest.class);
        req.subscriptionGroupId = GenericUtilities.getRandomUUIDv4();
        req.clientRef = 'S-'+string.valueOf(Math.abs(GenericUtilities.getRandom()));
        req.effectivePeriod.notBefore = startDate;
        req.effectivePeriod.notAfter = endDate;
        req.entitledAccount.id = acc.Id;
        req.managingAccount.id = macc.Id;
        req.customerContact.id = con.Id;
        req.customerCommunityUsers[0].contactId = con.Id;
        req.customerCommunityUsers[0].identity.idpId = GenericUtilities.getRandomUUIDv4();

        SageApiActivity__c activity = new SageApiActivity__c(ActivityStatus__c=SageApiStatus.Success, ActivityType__c=activityType, ActivityTypeVersion__c=2, Name=guid, ActivityID__c=activityType+':'+guid, ChannelPlatformProvided__c='Tetris', ChannelPartnerProvided__c='Tetris', Payload__c=JSON.serialize(req), ApiStartTime__c=DateTime.now(),
                Account__c=acc.Id, managingAccount__c=macc.Id, SubscriptionId__c=cbcSubscriptionId, EntitlementId__c=entitlementId);
        insert activity;
        Subscription_Master__c sm = new Subscription_Master__c(Sage_Api_Activity__c=activity.Id, Account__c=acc.Id, ManagingAccount__c=macc.Id, Start_Date__c=Date.valueOf(startDate), End_Date__c=Date.valueOf(endDate), CbcSubscriptionId__c=cbcSubscriptionId, EnableInsertTrigger__c=false, Entitlement_Id__c=entitlementId, Status__c='Trial', SubscriptionState__c='Active');
        insert sm;

        List<EntitlementProduct__c> products = new List<EntitlementProduct__c>();
        for (SageApiActivityRequestObjects.ProductRequest p : req.products) {
            EntitlementProduct__c prod = new EntitlementProduct__c(SubscriptionMaster__c=sm.id, Name=p.product);
            products.add(prod);
        }
        insert products;

        activity.SubscriptionMaster__c = sm.id;
        activity.ActivityStatus__c = SageApiStatus.Success;
        update activity;
        return activity;
    }

    static public SageApiActivity__c createDeleteSubscriptionActivity()
    {
        SageApiActivity__c createActivity = createCreateSubscriptionV2Artifacts();
        String activityType = SageApiActivityTriggerHandler.DeleteSubscriptionActivityType;
        string guid = GenericUtilities.getRandomUUIDv4();

        SageApiActivity__c activity = new SageApiActivity__c(ActivityStatus__c=SageApiStatus.Unknown, ActivityType__c=activityType, Name = guid, ActivityID__c = activityType+':'+guid, ChannelPlatformProvided__c='Tetris', ChannelPartnerProvided__c='Tetris', SubscriptionMaster__c=createActivity.SubscriptionMaster__c, SubscriptionId__c=createActivity.SubscriptionId__c, ApiStartTime__c = DateTime.now());
        return activity;
    }

    static public SageApiActivity__c createSuspendSubscriptionActivity()
    {
        SageApiActivity__c createActivity = createCreateSubscriptionV2Artifacts();
        String activityType = SageApiActivityTriggerHandler.SuspendSubscriptionActivityType;
        string guid = GenericUtilities.getRandomUUIDv4();

        SageApiActivity__c activity = new SageApiActivity__c(ActivityStatus__c=SageApiStatus.Unknown, ActivityType__c=activityType, Name = guid, ActivityID__c = activityType+':'+guid, ChannelPlatformProvided__c='Tetris', ChannelPartnerProvided__c='Tetris', SubscriptionMaster__c=createActivity.SubscriptionMaster__c, SubscriptionId__c=createActivity.SubscriptionId__c, ApiStartTime__c = DateTime.now(), Payload__c='{"reasonCode" : "Badpayment", "reasonDescription" : "Failed payment"}');
        return activity;
    }

    static public SageApiActivity__c createReactivateSubscriptionActivity()
    {
        SageApiActivity__c createActivity = createCreateSubscriptionV2Artifacts();
        Subscription_Master__c sm = new Subscription_Master__c(id=createActivity.SubscriptionMaster__c, SubscriptionState__c='Suspended');
        update sm;

        String activityType = SageApiActivityTriggerHandler.ReactivateSubscriptionActivityType;
        string guid = GenericUtilities.getRandomUUIDv4();

        SageApiActivity__c activity = new SageApiActivity__c(ActivityStatus__c=SageApiStatus.Unknown, ActivityType__c=activityType, Name = guid, ActivityID__c = activityType+':'+guid, ChannelPlatformProvided__c='Tetris', ChannelPartnerProvided__c='Tetris', SubscriptionMaster__c=createActivity.SubscriptionMaster__c, SubscriptionId__c=createActivity.SubscriptionId__c, ApiStartTime__c = DateTime.now());
        return activity;
    }

    static public SageApiActivity__c createConvertSubscriptionActivity()
    {
        SageApiActivity__c createActivity = createCreateSubscriptionV2Artifacts();
        String activityType = SageApiActivityTriggerHandler.ConvertSubscriptionActivityType;
        string guid = GenericUtilities.getRandomUUIDv4();

        Date d = date.today();
        String startDate = DateTime.newInstance(d.year(),d.month(),d.day()).format('yyyy-MM-dd');
        Date nd = d.addDays(30);
        String endDate = DateTime.newInstance(nd.year(),nd.month(),nd.day()).format('yyyy-MM-dd');

        SageApiActivity__c activity = new SageApiActivity__c(ActivityStatus__c=SageApiStatus.Unknown, ActivityType__c=activityType, Name = guid, ActivityID__c = activityType+':'+guid, ChannelPlatformProvided__c='Tetris', ChannelPartnerProvided__c='Tetris', SubscriptionMaster__c=createActivity.SubscriptionMaster__c, SubscriptionId__c=createActivity.SubscriptionId__c, ApiStartTime__c = DateTime.now(), Payload__c='{"effectivePeriod":{"notBefore":"'+startDate+'","notAfter":"'+endDate+'"}}');
        return activity;
    }

    static public SageApiActivity__c createRegradeSubscriptionActivity()
    {
        SageApiActivity__c createActivity = createCreateSubscriptionV2Artifacts();
        String activityType = SageApiActivityTriggerHandler.RegradeSubscriptionActivityType;
        string guid = GenericUtilities.getRandomUUIDv4();

        String template = '{"isTrial":true,"state":"Active","products":[{ "product":"sageoneaccounting", "features":[{ "properties":[{ "value":"SomeValue", "name":"SomeProperty"} ], "name":"SomeFeature"} ]},{ "product":"sageonepayroll", "features":[{ "properties":[{ "value":"SomeValue", "name":"SomeProperty"} ], "name":"SomeFeature"}]}],"entitlement":{"products":[{"product":"SageoneAccounting","launchUrl":"https://someUrl.com"},{"product":"Sageonepayroll","launchUrl":"https://someUrl.com"}],"entitlementId":"4c1f7a76-f34b-4852-2578-5684760b456e"}}';
        SageApiActivityRequestObjects.SubscriptionAllData req = (SageApiActivityRequestObjects.SubscriptionAllData) JSON.deserialize(template, SageApiActivityRequestObjects.SubscriptionAllData.class);

        SageApiActivity__c activity = new SageApiActivity__c(ActivityStatus__c=SageApiStatus.Unknown, ActivityType__c=activityType, Name = guid, ActivityID__c = activityType+':'+guid, ChannelPlatformProvided__c='Tetris', ChannelPartnerProvided__c='Tetris', SubscriptionMaster__c=createActivity.SubscriptionMaster__c, SubscriptionId__c=createActivity.SubscriptionId__c, Payload__c=JSON.serialize(req), ApiStartTime__c = DateTime.now());
        return activity;
    }

    static public SageApiActivity__c createUpdateSubscriptionEffectivePeriodActivity()
    {
        SageApiActivity__c createActivity = createCreateSubscriptionV2Artifacts();
        String activityType = SageApiActivityTriggerHandler.UpdateSubscriptionEffectivePeriodActivityType;
        string guid = GenericUtilities.getRandomUUIDv4();

        Date d = date.today();
        String startDate = DateTime.newInstance(d.year(),d.month(),d.day()).format('yyyy-MM-dd');
        Date nd = d.addDays(30);
        String endDate = DateTime.newInstance(nd.year(),nd.month(),nd.day()).format('yyyy-MM-dd');
        String template = '{ "effectivePeriod":{"notBefore":"'+startDate+'","notAfter":"'+endDate+'" }}';
        SageApiActivityRequestObjects.SubscriptionRequest req = (SageApiActivityRequestObjects.SubscriptionRequest) JSON.deserialize(template, SageApiActivityRequestObjects.SubscriptionRequest.class);

        SageApiActivity__c activity = new SageApiActivity__c(ActivityStatus__c=SageApiStatus.Unknown, ActivityType__c=activityType, Name = guid, ActivityID__c = activityType+':'+guid, ChannelPlatformProvided__c='Tetris', ChannelPartnerProvided__c='Tetris', SubscriptionMaster__c=createActivity.SubscriptionMaster__c, SubscriptionId__c=createActivity.SubscriptionId__c, Payload__c=JSON.serialize(req), ApiStartTime__c = DateTime.now());
        return activity;
    }

    public class PayNowPurchaseTokenMock implements HttpCalloutMock
    {
        public HTTPResponse respond(HTTPRequest req)
        {
            HttpResponse resp = new HttpResponse();
            resp.setStatusCode( 200 );
            resp.setBody( '{"purchase-token-id": "' + GenericUtilities.getRandomUUIDv4() + '"}' );
            return resp;
        }
    }

    static public SageApiTryNowActivityRequest createPayload()
    {
        String identityId = GenericUtilities.getRandomUUIDv4();

        SageApiTryNowActivityRequest payload = new SageApiTryNowActivityRequest();
        payload.startDate = System.now().format('yyyy-MM-dd');
        payload.endDate = System.now().addDays( 30 ).format('yyyy-MM-dd');
        payload.contact = new SageApiActivityRequestObjects.Contact();
        payload.contact.identityId = identityId;
        payload.contact.identityType = 'SageID';
        payload.contact.firstName = 'Some';
        payload.contact.lastName = 'One';
        payload.contact.email = 'someone@example.com';
        payload.contact.city = 'Atlanta';
        payload.contact.postalCode = '30318';
        payload.contact.countryCode = 'US';
        payload.account = new SageApiActivityRequestObjects.Account();
        payload.account.name = 'Noone Ltd';
        payload.account.address1 = 'Downing Street';
        payload.account.city = 'Atlanta';
        payload.account.countryCode = 'US';
        payload.account.postalCode = '30318';
        payload.products = new List<SageApiActivityRequestObjects.Product>();
        payload.products.add( new SageApiActivityRequestObjects.Product() );
        payload.products[0].tierCode = 'SageOne-Start-US';
        payload.products[0].tierRatePlanCode = 'Monthly';
        return payload;
    }

    static public SageApiSubscriptionActivityRequest createCreateSubscriptionPayload()
    {
        SageApiSubscriptionActivityRequest payload = new SageApiSubscriptionActivityRequest();
        payload.contact = new SageApiActivityRequestObjects.Contact();
        payload.contact.identityId = GenericUtilities.getRandomUUIDv4();
        payload.contact.identityType = 'SageID';
        payload.contact.firstName = 'Some';
        payload.contact.lastName = 'One';
        payload.contact.email = 'someone@example.com';
        payload.contact.city = 'Atlanta';
        payload.contact.postalCode = '30318';
        payload.contact.countryCode = 'US';
        payload.contact.contactId = GenericUtilities.getRandomUUIDv4();
        payload.contact.contactType = 'AppDirect';
        payload.account = new SageApiActivityRequestObjects.Account();
        payload.account.name = 'Noone Ltd';
        payload.account.address1 = 'Downing Street';
        payload.account.city = 'Atlanta';
        payload.account.countryCode = 'US';
        payload.account.postalCode = '30318';
        payload.account.accountId = GenericUtilities.getRandomUUIDv4();
        payload.account.accountType = 'AppDirect';
        payload.subscription = new SageApiActivityRequestObjects.Subscription();
        payload.subscription.cbcSubscriptionId = 'some cbc sub id';
        payload.subscription.startDate = System.now().format('yyyy-MM-dd');
        payload.subscription.endDate = System.now().addDays(30).format('yyyy-MM-dd');
        payload.subscription.products = new List<SageApiActivityRequestObjects.Product>();
        payload.subscription.products.add( new SageApiActivityRequestObjects.Product() );
        payload.subscription.products[0].tierCode = 'SageOne-Start-US';
        payload.subscription.products[0].isTrial = false;
        return payload;
    }

    static public SageApiSubscriptionActivityRequest createUpdateSubscriptionPayload(String cbcSubscriptionId)
    {
        SageApiSubscriptionActivityRequest payload = new SageApiSubscriptionActivityRequest();
        payload.subscription = new SageApiActivityRequestObjects.Subscription();
        payload.subscription.cbcSubscriptionId = cbcSubscriptionId;
        return payload;
    }

    static public SageApiSubscriptionActivityRequest createCreateAccountPayload()
    {
        SageApiSubscriptionActivityRequest payload = new SageApiSubscriptionActivityRequest();
        payload.contact = new SageApiActivityRequestObjects.Contact();
        payload.contact.identityId = GenericUtilities.getRandomUUIDv4();
        payload.contact.identityType = 'SageID';
        payload.contact.firstName = 'Some';
        payload.contact.lastName = 'One';
        payload.contact.email = 'someone@example.com';
        payload.contact.city = 'Atlanta';
        payload.contact.postalCode = '30318';
        payload.contact.countryCode = 'US';
        payload.contact.contactId = GenericUtilities.getRandomUUIDv4();
        payload.contact.contactType = 'AppDirect';
        payload.account = new SageApiActivityRequestObjects.Account();
        payload.account.name = 'Noone Ltd';
        payload.account.address1 = 'Downing Street';
        payload.account.city = 'Atlanta';
        payload.account.countryCode = 'US';
        payload.account.postalCode = '30318';
        payload.account.accountId = GenericUtilities.getRandomUUIDv4();
        payload.account.accountType = 'AppDirect';
        return payload;
    }

    static public SageApiTryNowActivityRequest createTetrisStartTrialPayload()
    {
        Locale__c loc = [SELECT Id FROM Locale__c LIMIT 1];
        Account acc = TestDataUtility.createAccount(loc.id);
        Contact con = TestDataUtility.createContact(acc.Id);
        String identityId = GenericUtilities.getRandomUUIDv4();

        SageApiTryNowActivityRequest payload = new SageApiTryNowActivityRequest();
        payload.startDate = System.now().format('yyyy-MM-dd');
        payload.endDate = System.now().addDays( 30 ).format('yyyy-MM-dd');
        payload.contact = new SageApiActivityRequestObjects.Contact();
        payload.contact.contactId = con.Id;
        payload.contact.identityId = identityId;
        payload.contact.identityType = 'SageID';
        payload.account = new SageApiActivityRequestObjects.Account();
        payload.account.accountId = acc.Id;
        payload.products = new List<SageApiActivityRequestObjects.Product>();
        payload.products.add( new SageApiActivityRequestObjects.Product() );
        payload.products[0].tierCode = 'SageOne-Start-US';
        payload.products[0].tierRatePlanCode = 'Monthly';
        return payload;
    }

    static public SageApiTryNowActivityRequest createTetrisStartTrialPayload(String pricingCode)
    {
        Locale__c loc = [SELECT Id FROM Locale__c LIMIT 1];
        Account acc = TestDataUtility.createAccount(loc.id);
        Contact con = TestDataUtility.createContact(acc.Id);
        String identityId = GenericUtilities.getRandomUUIDv4();

        SageApiTryNowActivityRequest payload = new SageApiTryNowActivityRequest();
        payload.startDate = System.now().format('yyyy-MM-dd');
        payload.endDate = System.now().addDays( 30 ).format('yyyy-MM-dd');
        payload.contact = new SageApiActivityRequestObjects.Contact();
        payload.contact.contactId = con.Id;
        payload.contact.identityId = identityId;
        payload.contact.identityType = 'SageID';
        payload.account = new SageApiActivityRequestObjects.Account();
        payload.account.accountId = acc.Id;
        payload.products = new List<SageApiActivityRequestObjects.Product>();
        payload.products.add( new SageApiActivityRequestObjects.Product() );
        payload.products[0].tierCode = 'SageOne-Start-US';
        payload.products[0].tierRatePlanCode = 'Monthly';
        payload.products[0].pricingCode = pricingCode;
        return payload;
    }

    static public SageApiTryNowConvertActivityRequest createTetrisConvertTrialPayload(String trialId, String zuoraSubscriptionId)
    {
        SageApiTryNowConvertActivityRequest payload = new SageApiTryNowConvertActivityRequest();
        payload.cbcTrialId = trialId;
        payload.zuoraSubscriptionId = zuoraSubscriptionId;
        return payload;
    }

    static public SageApiBuyNowActivityRequest createTetrisStartPaidPayload()
    {
        Locale__c loc = [SELECT Id FROM Locale__c LIMIT 1];
        Account acc = TestDataUtility.createAccount(loc.id);
        Contact con = TestDataUtility.createContact(acc.Id);
        String identityId = GenericUtilities.getRandomUUIDv4();

        SageApiBuyNowActivityRequest payload = new SageApiBuyNowActivityRequest();
        payload.startDate = System.now().format('yyyy-MM-dd');
        payload.contact = new SageApiActivityRequestObjects.Contact();
        payload.contact.contactId = con.Id;
        payload.contact.identityId = identityId;
        payload.contact.identityType = 'SageID';
        payload.account = new SageApiActivityRequestObjects.Account();
        payload.account.accountId = acc.Id;
        payload.products = new List<SageApiActivityRequestObjects.Product>();
        payload.products.add( new SageApiActivityRequestObjects.Product() );
        payload.products[0].tierCode = 'SageOne-Start-US';
        payload.zuoraSubscriptionId = 'Zuora Subscription Id';
        return payload;
    }

    static public SageApiActivity__c createCreateSubscriptionActivity( SageApiSubscriptionActivityRequest payload )
    {
        return SageApiTestUtils.createActivity( SageApiActivityTriggerHandler.CreateSubscriptionActivityType, JSON.serialize( payload ) );
    }

    static public SageApiActivity__c createActivity( SageApiTryNowActivityRequest payload )
    {
        return SageApiTestUtils.createActivity( SageApiActivityTriggerHandler.TryNowActivityType, JSON.serialize( payload ) );
    }

    static public SageApiActivity__c createActivity( SageApiTryNowConvertActivityRequest payload )
    {
        return SageApiTestUtils.createActivity( SageApiActivityTriggerHandler.TetrisConvertTrialActivityType, JSON.serialize( payload ) );
    }

    static public SageApiActivity__c cloneActivity(SageApiActivity__c activity) {
        try {
            return (SageApiActivity__c)JSON.deserialize(JSON.serialize(activity), SageApiActivity__c.class);
        } catch (Exception ex) {
            return null;
        }
    }

    static public Lead createLead(String accountId, String contactId) {
        Account account = [SELECT id, Name, Phone, BillingStreet, BillingCity, BillingStateCode, BillingCountryCode, BillingPostalCode, Sales_Office__c, CurrencyIsoCode FROM Account WHERE id=:accountId];
        Contact contact = [SELECT id, FirstName, LastName, Email, Phone, Product__c, MailingStreet, MailingCity, MailingStateCode, MailingPostalCode, MailingCountryCode, Account_Sales_Office__c, CurrencyIsoCode FROM Contact WHERE id=:contactId];
        Id recordTypeId = Schema.SObjectType.Lead.getRecordTypeInfosByName().get('Standard Lead').getRecordTypeId();
        Lead lead = new Lead(
                FirstName = contact.FirstName,
                LastName = contact.LastName,
                Company = account.Name,
                Email = contact.Email,
                Phone = String.IsBlank(Account.Phone) ? contact.Phone: account.Phone,
                Product__c = contact.Product__c,
                Street = String.IsBlank(account.BillingStreet) ? contact.MailingStreet : account.BillingStreet,
                City = String.IsBlank(account.BillingCity) ? contact.MailingCity : account.BillingCity,
                StateCode = String.IsBlank(account.BillingStateCode) ? contact.MailingStateCode : account.BillingStateCode,
                PostalCode = String.IsBlank(account.BillingPostalCode) ? contact.MailingPostalCode : account.BillingPostalCode ,
                CountryCode = String.IsBlank(account.BillingCountryCode) ? contact.MailingCountryCode : account.BillingCountryCode,
                Sales_Office__c = String.IsBlank(account.Sales_Office__c) ? contact.Account_Sales_Office__c : account.Sales_Office__c,
                RecordTypeId = recordTypeId,
                CurrencyIsoCode = String.IsBlank(account.CurrencyIsoCode) ? contact.CurrencyIsoCode : account.CurrencyIsoCode
        );
        insert lead;
        return lead;
    }

}